// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20250323143644_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Bet", b =>
                {
                    b.Property<Guid>("BetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BetDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BookmakerId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsTaxIncluded")
                        .HasColumnType("bit");

                    b.Property<int>("LivePrematch")
                        .HasColumnType("int");

                    b.Property<decimal>("Stake")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("BetId");

                    b.HasIndex("BookmakerId");

                    b.ToTable("Bets");
                });

            modelBuilder.Entity("Domain.Entities.Bookmaker", b =>
                {
                    b.Property<int>("BookmakerId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("BookmakerId");

                    b.ToTable("Bookmakers");

                    b.HasData(
                        new
                        {
                            BookmakerId = 1,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6815),
                            ImagePath = "/Images/Bookmakers/betclic.png",
                            Name = "Betclic",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6815)
                        },
                        new
                        {
                            BookmakerId = 2,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6817),
                            ImagePath = "/Images/Bookmakers/superbet.png",
                            Name = "Superbet",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6817)
                        },
                        new
                        {
                            BookmakerId = 3,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6818),
                            ImagePath = "/Images/Bookmakers/fortuna.png",
                            Name = "Fortuna",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6818)
                        },
                        new
                        {
                            BookmakerId = 4,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6819),
                            ImagePath = "/Images/Bookmakers/sts.png",
                            Name = "STS",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6819)
                        },
                        new
                        {
                            BookmakerId = 5,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6819),
                            ImagePath = "/Images/Bookmakers/betfan.png",
                            Name = "Betfan",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6820)
                        },
                        new
                        {
                            BookmakerId = 6,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6820),
                            ImagePath = "/Images/Bookmakers/fuksiarz.png",
                            Name = "Fuksiarz",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6820)
                        },
                        new
                        {
                            BookmakerId = 7,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6821),
                            ImagePath = "/Images/Bookmakers/lvbet.png",
                            Name = "LvBet",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6821)
                        },
                        new
                        {
                            BookmakerId = 8,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6822),
                            ImagePath = "/Images/Bookmakers/betters.png",
                            Name = "Betters",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6822)
                        },
                        new
                        {
                            BookmakerId = 9,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6822),
                            ImagePath = "/Images/Bookmakers/betcris.png",
                            Name = "Betcris",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6823)
                        },
                        new
                        {
                            BookmakerId = 10,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6823),
                            ImagePath = "/Images/Bookmakers/gobet.png",
                            Name = "GoBet",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6823)
                        },
                        new
                        {
                            BookmakerId = 11,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6824),
                            ImagePath = "/Images/Bookmakers/totalbet.png",
                            Name = "TotalBet",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6824)
                        },
                        new
                        {
                            BookmakerId = 12,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6825),
                            ImagePath = "/Images/Bookmakers/forbet.png",
                            Name = "ForBet",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6825)
                        },
                        new
                        {
                            BookmakerId = 13,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6825),
                            ImagePath = "/Images/Bookmakers/etoto.png",
                            Name = "Etoto",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6826)
                        },
                        new
                        {
                            BookmakerId = 14,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6826),
                            ImagePath = "/Images/Bookmakers/comeon.png",
                            Name = "ComeOn",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6826)
                        },
                        new
                        {
                            BookmakerId = 15,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6827),
                            ImagePath = "/Images/Bookmakers/pzbuk.png",
                            Name = "Pzbuk",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6827)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6583),
                            Name = "Football",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6584)
                        },
                        new
                        {
                            CategoryId = 2,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6587),
                            Name = "Tennis",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6588)
                        },
                        new
                        {
                            CategoryId = 3,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6588),
                            Name = "Basketball",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6588)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FlagUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Domain.Entities.Event", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<int>("LeagueTournamentId")
                        .HasColumnType("int");

                    b.Property<int?>("LeagueTournamentId1")
                        .HasColumnType("int");

                    b.Property<decimal>("Odds")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("EventId");

                    b.HasIndex("BetId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("EventTypeId");

                    b.HasIndex("LeagueTournamentId");

                    b.HasIndex("LeagueTournamentId1");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Domain.Entities.EventType", b =>
                {
                    b.Property<int>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("EventTypeId");

                    b.HasIndex("CategoryId");

                    b.ToTable("EventTypes");

                    b.HasData(
                        new
                        {
                            EventTypeId = 1,
                            CategoryId = 1,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6714),
                            Name = "BTTS",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6714)
                        },
                        new
                        {
                            EventTypeId = 2,
                            CategoryId = 1,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6743),
                            Name = "1X2",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6743)
                        },
                        new
                        {
                            EventTypeId = 3,
                            CategoryId = 1,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6744),
                            Name = "Over/Under Goals",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6744)
                        },
                        new
                        {
                            EventTypeId = 4,
                            CategoryId = 1,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6744),
                            Name = "Corners",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6745)
                        },
                        new
                        {
                            EventTypeId = 5,
                            CategoryId = 1,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6745),
                            Name = "Yellow Cards",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6745)
                        },
                        new
                        {
                            EventTypeId = 6,
                            CategoryId = 1,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6746),
                            Name = "Correct Score",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6746)
                        },
                        new
                        {
                            EventTypeId = 7,
                            CategoryId = 1,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6747),
                            Name = "Double Chance",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6747)
                        },
                        new
                        {
                            EventTypeId = 8,
                            CategoryId = 1,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6747),
                            Name = "First Goal Scorer",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6748)
                        },
                        new
                        {
                            EventTypeId = 9,
                            CategoryId = 1,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6748),
                            Name = "Last Goal Scorer",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6748)
                        },
                        new
                        {
                            EventTypeId = 10,
                            CategoryId = 1,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6749),
                            Name = "Player to Score Anytime",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6749)
                        },
                        new
                        {
                            EventTypeId = 11,
                            CategoryId = 1,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6750),
                            Name = "Clean Sheet",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6750)
                        },
                        new
                        {
                            EventTypeId = 12,
                            CategoryId = 1,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6750),
                            Name = "Team to Win Both Halves",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6751)
                        },
                        new
                        {
                            EventTypeId = 13,
                            CategoryId = 1,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6751),
                            Name = "Half-Time Result",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6751)
                        },
                        new
                        {
                            EventTypeId = 14,
                            CategoryId = 1,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6752),
                            Name = "Full-Time Result",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6752)
                        },
                        new
                        {
                            EventTypeId = 15,
                            CategoryId = 1,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6753),
                            Name = "Half-Time/Full-Time",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6753)
                        },
                        new
                        {
                            EventTypeId = 16,
                            CategoryId = 1,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6753),
                            Name = "Team to Score First",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6754)
                        },
                        new
                        {
                            EventTypeId = 17,
                            CategoryId = 1,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6754),
                            Name = "First Half Goals",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6755)
                        },
                        new
                        {
                            EventTypeId = 18,
                            CategoryId = 1,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6755),
                            Name = "Second Half Goals",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6755)
                        },
                        new
                        {
                            EventTypeId = 19,
                            CategoryId = 2,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6756),
                            Name = "Total Aces",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6756)
                        },
                        new
                        {
                            EventTypeId = 20,
                            CategoryId = 2,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6757),
                            Name = "Total Double Faults",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6757)
                        },
                        new
                        {
                            EventTypeId = 21,
                            CategoryId = 2,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6757),
                            Name = "Set Winner",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6758)
                        },
                        new
                        {
                            EventTypeId = 22,
                            CategoryId = 2,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6758),
                            Name = "Match Winner",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6758)
                        },
                        new
                        {
                            EventTypeId = 23,
                            CategoryId = 2,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6759),
                            Name = "First Set Winner",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6759)
                        },
                        new
                        {
                            EventTypeId = 24,
                            CategoryId = 2,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6760),
                            Name = "Total Games Over/Under",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6760)
                        },
                        new
                        {
                            EventTypeId = 25,
                            CategoryId = 3,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6761),
                            Name = "First Basket Scorer",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6761)
                        },
                        new
                        {
                            EventTypeId = 26,
                            CategoryId = 3,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6761),
                            Name = "Total Points Over/Under",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6762)
                        },
                        new
                        {
                            EventTypeId = 27,
                            CategoryId = 3,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6762),
                            Name = "Winning Margin",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6762)
                        },
                        new
                        {
                            EventTypeId = 28,
                            CategoryId = 3,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6763),
                            Name = "Most Assists",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6763)
                        },
                        new
                        {
                            EventTypeId = 29,
                            CategoryId = 3,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6764),
                            Name = "Total Rebounds",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6764)
                        },
                        new
                        {
                            EventTypeId = 30,
                            CategoryId = 3,
                            CreatedBy = "ADMIN",
                            CreatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6764),
                            Name = "First Team to Score 20 Points",
                            UpdatedOn = new DateTime(2025, 3, 23, 14, 36, 44, 559, DateTimeKind.Utc).AddTicks(6765)
                        });
                });

            modelBuilder.Entity("Domain.Entities.LeagueTournament", b =>
                {
                    b.Property<int>("LeagueTournamentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LeagueTournamentId"));

                    b.Property<int>("ApiId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("LeagueTournamentId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CountryId");

                    b.ToTable("LeagueTournaments");
                });

            modelBuilder.Entity("Domain.Entities.Bet", b =>
                {
                    b.HasOne("Domain.Entities.Bookmaker", "Bookmaker")
                        .WithMany("BetList")
                        .HasForeignKey("BookmakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bookmaker");
                });

            modelBuilder.Entity("Domain.Entities.Event", b =>
                {
                    b.HasOne("Domain.Entities.Bet", "Bet")
                        .WithMany("EventsList")
                        .HasForeignKey("BetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.LeagueTournament", "LeagueTournament")
                        .WithMany()
                        .HasForeignKey("LeagueTournamentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.LeagueTournament", null)
                        .WithMany("Events")
                        .HasForeignKey("LeagueTournamentId1");

                    b.Navigation("Bet");

                    b.Navigation("Category");

                    b.Navigation("EventType");

                    b.Navigation("LeagueTournament");
                });

            modelBuilder.Entity("Domain.Entities.EventType", b =>
                {
                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("EventTypes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Entities.LeagueTournament", b =>
                {
                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("Domain.Entities.Country", "Country")
                        .WithMany("Leagues")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Domain.Entities.Bet", b =>
                {
                    b.Navigation("EventsList");
                });

            modelBuilder.Entity("Domain.Entities.Bookmaker", b =>
                {
                    b.Navigation("BetList");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Navigation("EventTypes");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("Domain.Entities.Country", b =>
                {
                    b.Navigation("Leagues");
                });

            modelBuilder.Entity("Domain.Entities.EventType", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Domain.Entities.LeagueTournament", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
