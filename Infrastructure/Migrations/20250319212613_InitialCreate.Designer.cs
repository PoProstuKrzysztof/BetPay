// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20250319212613_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Bet", b =>
                {
                    b.Property<Guid>("BetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BetDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BookmakerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsTaxIncluded")
                        .HasColumnType("bit");

                    b.Property<int>("LivePrematch")
                        .HasColumnType("int");

                    b.Property<decimal>("Stake")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("BetId");

                    b.HasIndex("BookmakerId");

                    b.ToTable("Bets");

                    b.HasData(
                        new
                        {
                            BetId = new Guid("84eacbf1-abda-41bf-a071-1c910bc2473d"),
                            BetDate = new DateTime(2023, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BookmakerId = 2,
                            IsTaxIncluded = true,
                            LivePrematch = 2,
                            Stake = 50m
                        },
                        new
                        {
                            BetId = new Guid("f7c02600-ecc6-4c5e-9e87-07d91bf26316"),
                            BetDate = new DateTime(2023, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BookmakerId = 3,
                            IsTaxIncluded = true,
                            LivePrematch = 2,
                            Stake = 100m
                        },
                        new
                        {
                            BetId = new Guid("a78e4e22-2477-46ef-bbc6-a1e0a04665e5"),
                            BetDate = new DateTime(2023, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BookmakerId = 1,
                            IsTaxIncluded = false,
                            LivePrematch = 2,
                            Stake = 200m
                        },
                        new
                        {
                            BetId = new Guid("50bce28b-e41a-4176-9064-68132b01a1bf"),
                            BetDate = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BookmakerId = 1,
                            IsTaxIncluded = false,
                            LivePrematch = 1,
                            Stake = 75m
                        },
                        new
                        {
                            BetId = new Guid("ef724ccf-5f6c-4ed5-967a-655a635cc3e4"),
                            BetDate = new DateTime(2023, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BookmakerId = 5,
                            IsTaxIncluded = true,
                            LivePrematch = 1,
                            Stake = 150m
                        });
                });

            modelBuilder.Entity("Domain.Entities.Bookmaker", b =>
                {
                    b.Property<int>("BookmakerId")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookmakerId");

                    b.ToTable("Bookmakers");

                    b.HasData(
                        new
                        {
                            BookmakerId = 1,
                            ImagePath = "/Images/Bookmakers/betclic.png",
                            Name = "Betclic"
                        },
                        new
                        {
                            BookmakerId = 2,
                            ImagePath = "/Images/Bookmakers/superbet.png",
                            Name = "Superbet"
                        },
                        new
                        {
                            BookmakerId = 3,
                            ImagePath = "/Images/Bookmakers/fortuna.png",
                            Name = "Fortuna"
                        },
                        new
                        {
                            BookmakerId = 4,
                            ImagePath = "/Images/Bookmakers/sts.png",
                            Name = "STS"
                        },
                        new
                        {
                            BookmakerId = 5,
                            ImagePath = "/Images/Bookmakers/betfan.png",
                            Name = "Betfan"
                        },
                        new
                        {
                            BookmakerId = 6,
                            ImagePath = "/Images/Bookmakers/fuksiarz.png",
                            Name = "Fuksiarz"
                        },
                        new
                        {
                            BookmakerId = 7,
                            ImagePath = "/Images/Bookmakers/lvbet.png",
                            Name = "LvBet"
                        },
                        new
                        {
                            BookmakerId = 8,
                            ImagePath = "/Images/Bookmakers/betters.png",
                            Name = "Betters"
                        },
                        new
                        {
                            BookmakerId = 9,
                            ImagePath = "/Images/Bookmakers/betcris.png",
                            Name = "Betcris"
                        },
                        new
                        {
                            BookmakerId = 10,
                            ImagePath = "/Images/Bookmakers/gobet.png",
                            Name = "GoBet"
                        },
                        new
                        {
                            BookmakerId = 11,
                            ImagePath = "/Images/Bookmakers/totalbet.png",
                            Name = "TotalBet"
                        },
                        new
                        {
                            BookmakerId = 12,
                            ImagePath = "/Images/Bookmakers/forbet.png",
                            Name = "ForBet"
                        },
                        new
                        {
                            BookmakerId = 13,
                            ImagePath = "/Images/Bookmakers/etoto.png",
                            Name = "Etoto"
                        },
                        new
                        {
                            BookmakerId = 14,
                            ImagePath = "/Images/Bookmakers/comeon.png",
                            Name = "ComeOn"
                        },
                        new
                        {
                            BookmakerId = 15,
                            ImagePath = "/Images/Bookmakers/pzbuk.png",
                            Name = "Pzbuk"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Football"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Tennis"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Basketball"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FlagUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Domain.Entities.Event", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<int>("LeagueTournamentId")
                        .HasColumnType("int");

                    b.Property<int?>("LeagueTournamentId1")
                        .HasColumnType("int");

                    b.Property<decimal>("Odds")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("EventId");

                    b.HasIndex("BetId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("EventTypeId");

                    b.HasIndex("LeagueTournamentId");

                    b.HasIndex("LeagueTournamentId1");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventId = new Guid("92be7b44-4d50-480e-987e-524d35b825c9"),
                            BetId = new Guid("84eacbf1-abda-41bf-a071-1c910bc2473d"),
                            CategoryId = 1,
                            EventTypeId = 1,
                            LeagueTournamentId = 1,
                            Odds = 1.5m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("ba1e87ad-0f14-42b0-9e54-f3081a116928"),
                            BetId = new Guid("84eacbf1-abda-41bf-a071-1c910bc2473d"),
                            CategoryId = 2,
                            EventTypeId = 2,
                            LeagueTournamentId = 8,
                            Odds = 2.0m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("e71b68a6-35e3-41aa-acb9-28f2503316b7"),
                            BetId = new Guid("84eacbf1-abda-41bf-a071-1c910bc2473d"),
                            CategoryId = 3,
                            EventTypeId = 3,
                            LeagueTournamentId = 2,
                            Odds = 1.7m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("1ccc000b-ae40-417a-98a6-ae10151e2bc6"),
                            BetId = new Guid("f7c02600-ecc6-4c5e-9e87-07d91bf26316"),
                            CategoryId = 2,
                            EventTypeId = 1,
                            LeagueTournamentId = 7,
                            Odds = 1.6m,
                            Status = 1
                        },
                        new
                        {
                            EventId = new Guid("2ddc0261-3ce4-47a9-8d32-78e0edf9f48a"),
                            BetId = new Guid("f7c02600-ecc6-4c5e-9e87-07d91bf26316"),
                            CategoryId = 1,
                            EventTypeId = 4,
                            LeagueTournamentId = 6,
                            Odds = 2.3m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("72b9e653-db70-4d26-9486-c0cc24577173"),
                            BetId = new Guid("f7c02600-ecc6-4c5e-9e87-07d91bf26316"),
                            CategoryId = 2,
                            EventTypeId = 5,
                            LeagueTournamentId = 10,
                            Odds = 2.1m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("f6863a09-9e0e-476f-bb9e-a119cb115d8b"),
                            BetId = new Guid("f7c02600-ecc6-4c5e-9e87-07d91bf26316"),
                            CategoryId = 1,
                            EventTypeId = 6,
                            LeagueTournamentId = 2,
                            Odds = 1.8m,
                            Status = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.EventType", b =>
                {
                    b.Property<int>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EventTypeId");

                    b.HasIndex("CategoryId");

                    b.ToTable("EventTypes");

                    b.HasData(
                        new
                        {
                            EventTypeId = 1,
                            CategoryId = 1,
                            Name = "BTTS"
                        },
                        new
                        {
                            EventTypeId = 2,
                            CategoryId = 1,
                            Name = "1X2"
                        },
                        new
                        {
                            EventTypeId = 3,
                            CategoryId = 1,
                            Name = "Over/Under Goals"
                        },
                        new
                        {
                            EventTypeId = 4,
                            CategoryId = 1,
                            Name = "Corners"
                        },
                        new
                        {
                            EventTypeId = 5,
                            CategoryId = 1,
                            Name = "Yellow Cards"
                        },
                        new
                        {
                            EventTypeId = 6,
                            CategoryId = 1,
                            Name = "Correct Score"
                        },
                        new
                        {
                            EventTypeId = 7,
                            CategoryId = 1,
                            Name = "Double Chance"
                        },
                        new
                        {
                            EventTypeId = 8,
                            CategoryId = 1,
                            Name = "First Goal Scorer"
                        },
                        new
                        {
                            EventTypeId = 9,
                            CategoryId = 1,
                            Name = "Last Goal Scorer"
                        },
                        new
                        {
                            EventTypeId = 10,
                            CategoryId = 1,
                            Name = "Player to Score Anytime"
                        },
                        new
                        {
                            EventTypeId = 11,
                            CategoryId = 1,
                            Name = "Clean Sheet"
                        },
                        new
                        {
                            EventTypeId = 12,
                            CategoryId = 1,
                            Name = "Team to Win Both Halves"
                        },
                        new
                        {
                            EventTypeId = 13,
                            CategoryId = 1,
                            Name = "Half-Time Result"
                        },
                        new
                        {
                            EventTypeId = 14,
                            CategoryId = 1,
                            Name = "Full-Time Result"
                        },
                        new
                        {
                            EventTypeId = 15,
                            CategoryId = 1,
                            Name = "Half-Time/Full-Time"
                        },
                        new
                        {
                            EventTypeId = 16,
                            CategoryId = 1,
                            Name = "Team to Score First"
                        },
                        new
                        {
                            EventTypeId = 17,
                            CategoryId = 1,
                            Name = "First Half Goals"
                        },
                        new
                        {
                            EventTypeId = 18,
                            CategoryId = 1,
                            Name = "Second Half Goals"
                        },
                        new
                        {
                            EventTypeId = 19,
                            CategoryId = 2,
                            Name = "Total Aces"
                        },
                        new
                        {
                            EventTypeId = 20,
                            CategoryId = 2,
                            Name = "Total Double Faults"
                        },
                        new
                        {
                            EventTypeId = 21,
                            CategoryId = 2,
                            Name = "Set Winner"
                        },
                        new
                        {
                            EventTypeId = 22,
                            CategoryId = 2,
                            Name = "Match Winner"
                        },
                        new
                        {
                            EventTypeId = 23,
                            CategoryId = 2,
                            Name = "First Set Winner"
                        },
                        new
                        {
                            EventTypeId = 24,
                            CategoryId = 2,
                            Name = "Total Games Over/Under"
                        },
                        new
                        {
                            EventTypeId = 25,
                            CategoryId = 3,
                            Name = "First Basket Scorer"
                        },
                        new
                        {
                            EventTypeId = 26,
                            CategoryId = 3,
                            Name = "Total Points Over/Under"
                        },
                        new
                        {
                            EventTypeId = 27,
                            CategoryId = 3,
                            Name = "Winning Margin"
                        },
                        new
                        {
                            EventTypeId = 28,
                            CategoryId = 3,
                            Name = "Most Assists"
                        },
                        new
                        {
                            EventTypeId = 29,
                            CategoryId = 3,
                            Name = "Total Rebounds"
                        },
                        new
                        {
                            EventTypeId = 30,
                            CategoryId = 3,
                            Name = "First Team to Score 20 Points"
                        });
                });

            modelBuilder.Entity("Domain.Entities.LeagueTournament", b =>
                {
                    b.Property<int>("LeagueTournamentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LeagueTournamentId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LeagueTournamentId");

                    b.HasIndex("CategoryId");

                    b.ToTable("LeagueTournaments");

                    b.HasData(
                        new
                        {
                            LeagueTournamentId = 1,
                            CategoryId = 1,
                            Name = "Premier League"
                        },
                        new
                        {
                            LeagueTournamentId = 2,
                            CategoryId = 1,
                            Name = "La Liga"
                        },
                        new
                        {
                            LeagueTournamentId = 3,
                            CategoryId = 1,
                            Name = "Serie A"
                        },
                        new
                        {
                            LeagueTournamentId = 4,
                            CategoryId = 1,
                            Name = "Bundesliga"
                        },
                        new
                        {
                            LeagueTournamentId = 5,
                            CategoryId = 1,
                            Name = "Ligue 1"
                        },
                        new
                        {
                            LeagueTournamentId = 6,
                            CategoryId = 1,
                            Name = "UEFA Champions League"
                        },
                        new
                        {
                            LeagueTournamentId = 7,
                            CategoryId = 1,
                            Name = "UEFA Europa League"
                        },
                        new
                        {
                            LeagueTournamentId = 8,
                            CategoryId = 1,
                            Name = "Euro Cup"
                        },
                        new
                        {
                            LeagueTournamentId = 9,
                            CategoryId = 1,
                            Name = "Copa America"
                        },
                        new
                        {
                            LeagueTournamentId = 10,
                            CategoryId = 1,
                            Name = "FIFA World Cup"
                        },
                        new
                        {
                            LeagueTournamentId = 11,
                            CategoryId = 2,
                            Name = "Wimbledon"
                        },
                        new
                        {
                            LeagueTournamentId = 12,
                            CategoryId = 2,
                            Name = "Roland Garros"
                        },
                        new
                        {
                            LeagueTournamentId = 13,
                            CategoryId = 2,
                            Name = "US Open"
                        },
                        new
                        {
                            LeagueTournamentId = 14,
                            CategoryId = 2,
                            Name = "Australian Open"
                        },
                        new
                        {
                            LeagueTournamentId = 15,
                            CategoryId = 2,
                            Name = "ATP Finals"
                        },
                        new
                        {
                            LeagueTournamentId = 16,
                            CategoryId = 3,
                            Name = "NBA Finals"
                        },
                        new
                        {
                            LeagueTournamentId = 17,
                            CategoryId = 3,
                            Name = "EuroLeague"
                        },
                        new
                        {
                            LeagueTournamentId = 18,
                            CategoryId = 3,
                            Name = "FIBA World Cup"
                        },
                        new
                        {
                            LeagueTournamentId = 19,
                            CategoryId = 3,
                            Name = "NCAA March Madness"
                        },
                        new
                        {
                            LeagueTournamentId = 20,
                            CategoryId = 3,
                            Name = "Olympic Basketball Tournament"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Bet", b =>
                {
                    b.HasOne("Domain.Entities.Bookmaker", "Bookmaker")
                        .WithMany("BetList")
                        .HasForeignKey("BookmakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bookmaker");
                });

            modelBuilder.Entity("Domain.Entities.Event", b =>
                {
                    b.HasOne("Domain.Entities.Bet", "Bet")
                        .WithMany("EventsList")
                        .HasForeignKey("BetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.LeagueTournament", "LeagueTournament")
                        .WithMany()
                        .HasForeignKey("LeagueTournamentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.LeagueTournament", null)
                        .WithMany("Events")
                        .HasForeignKey("LeagueTournamentId1");

                    b.Navigation("Bet");

                    b.Navigation("Category");

                    b.Navigation("EventType");

                    b.Navigation("LeagueTournament");
                });

            modelBuilder.Entity("Domain.Entities.EventType", b =>
                {
                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("EventTypes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Entities.LeagueTournament", b =>
                {
                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Entities.Bet", b =>
                {
                    b.Navigation("EventsList");
                });

            modelBuilder.Entity("Domain.Entities.Bookmaker", b =>
                {
                    b.Navigation("BetList");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Navigation("EventTypes");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("Domain.Entities.EventType", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Domain.Entities.LeagueTournament", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
