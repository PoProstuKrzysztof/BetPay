// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240916200407_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Bet", b =>
                {
                    b.Property<Guid>("BetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BetDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("BookmakerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsTaxIncluded")
                        .HasColumnType("bit");

                    b.Property<decimal>("Stake")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("BetId");

                    b.HasIndex("BookmakerId");

                    b.ToTable("Bets");

                    b.HasData(
                        new
                        {
                            BetId = new Guid("87b931e3-d6e8-4d42-805d-c93f09a402e7"),
                            BetDate = new DateTime(2024, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BookmakerId = 2,
                            IsTaxIncluded = true,
                            Stake = 50m
                        },
                        new
                        {
                            BetId = new Guid("a08555be-3662-449a-8da7-f425e8c20a2f"),
                            BetDate = new DateTime(2024, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BookmakerId = 3,
                            IsTaxIncluded = true,
                            Stake = 100m
                        },
                        new
                        {
                            BetId = new Guid("4abdf2b3-cfc4-4176-b657-c2662b115f68"),
                            BetDate = new DateTime(2024, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BookmakerId = 2,
                            IsTaxIncluded = true,
                            Stake = 200m
                        },
                        new
                        {
                            BetId = new Guid("bc1efdec-83b8-4057-820a-45d387c19767"),
                            BetDate = new DateTime(2024, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BookmakerId = 1,
                            IsTaxIncluded = false,
                            Stake = 75m
                        },
                        new
                        {
                            BetId = new Guid("a528195f-1109-4cde-8a0a-4e1d2999e062"),
                            BetDate = new DateTime(2024, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BookmakerId = 4,
                            IsTaxIncluded = true,
                            Stake = 150m
                        });
                });

            modelBuilder.Entity("Domain.Entities.Bookmaker", b =>
                {
                    b.Property<int>("BookmakerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookmakerId"));

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookmakerId");

                    b.ToTable("Bookmakers");

                    b.HasData(
                        new
                        {
                            BookmakerId = 1,
                            Name = "Betclic"
                        },
                        new
                        {
                            BookmakerId = 2,
                            Name = "Superbet"
                        },
                        new
                        {
                            BookmakerId = 3,
                            Name = "Fortuna"
                        },
                        new
                        {
                            BookmakerId = 4,
                            Name = "STS"
                        },
                        new
                        {
                            BookmakerId = 5,
                            Name = "Betfan"
                        },
                        new
                        {
                            BookmakerId = 6,
                            Name = "Fuksiarz"
                        },
                        new
                        {
                            BookmakerId = 7,
                            Name = "LvBet"
                        },
                        new
                        {
                            BookmakerId = 8,
                            Name = "Betters"
                        },
                        new
                        {
                            BookmakerId = 9,
                            Name = "Betcris"
                        },
                        new
                        {
                            BookmakerId = 10,
                            Name = "GoBet"
                        },
                        new
                        {
                            BookmakerId = 11,
                            Name = "TotalBet"
                        },
                        new
                        {
                            BookmakerId = 12,
                            Name = "ForBet"
                        },
                        new
                        {
                            BookmakerId = 13,
                            Name = "Etoto"
                        },
                        new
                        {
                            BookmakerId = 14,
                            Name = "ComeOn"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Football"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Soccer"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Tennis"
                        },
                        new
                        {
                            CategoryId = 4,
                            Name = "Basketball"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Event", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Odds")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("EventId");

                    b.HasIndex("BetId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("EventTypeId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventId = new Guid("5952c675-5f10-4844-999d-ea136f7eee4d"),
                            BetId = new Guid("87b931e3-d6e8-4d42-805d-c93f09a402e7"),
                            CategoryId = 1,
                            EventTypeId = 1,
                            Odds = 1.5m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("09a37797-8d97-49e5-b437-2be10d0d8e46"),
                            BetId = new Guid("87b931e3-d6e8-4d42-805d-c93f09a402e7"),
                            CategoryId = 2,
                            EventTypeId = 2,
                            Odds = 2.0m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("0d848284-ee55-419a-aca9-da94199f77dc"),
                            BetId = new Guid("a08555be-3662-449a-8da7-f425e8c20a2f"),
                            CategoryId = 1,
                            EventTypeId = 3,
                            Odds = 1.8m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("982cdbee-d9e7-41d4-ac04-a9e5867b9599"),
                            BetId = new Guid("a08555be-3662-449a-8da7-f425e8c20a2f"),
                            CategoryId = 3,
                            EventTypeId = 4,
                            Odds = 2.2m,
                            Status = 1
                        },
                        new
                        {
                            EventId = new Guid("0a684c8e-d330-46e6-b9ed-95457deea601"),
                            BetId = new Guid("4abdf2b3-cfc4-4176-b657-c2662b115f68"),
                            CategoryId = 2,
                            EventTypeId = 1,
                            Odds = 1.6m,
                            Status = 2
                        },
                        new
                        {
                            EventId = new Guid("730b937c-5de5-47fa-a30c-1a5d07f5b812"),
                            BetId = new Guid("4abdf2b3-cfc4-4176-b657-c2662b115f68"),
                            CategoryId = 1,
                            EventTypeId = 3,
                            Odds = 2.5m,
                            Status = 2
                        },
                        new
                        {
                            EventId = new Guid("cd1799aa-768f-45fb-9c97-11ddeac23f50"),
                            BetId = new Guid("bc1efdec-83b8-4057-820a-45d387c19767"),
                            CategoryId = 3,
                            EventTypeId = 4,
                            Odds = 2.0m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("18813c61-5019-4064-960f-47cbf5cba8b3"),
                            BetId = new Guid("bc1efdec-83b8-4057-820a-45d387c19767"),
                            CategoryId = 2,
                            EventTypeId = 2,
                            Odds = 1.7m,
                            Status = 2
                        },
                        new
                        {
                            EventId = new Guid("34a02abf-d4f4-49cb-b8ad-414199c7ccd7"),
                            BetId = new Guid("a528195f-1109-4cde-8a0a-4e1d2999e062"),
                            CategoryId = 1,
                            EventTypeId = 3,
                            Odds = 2.1m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("2e78c8e2-5941-4914-9982-001f3f365911"),
                            BetId = new Guid("a528195f-1109-4cde-8a0a-4e1d2999e062"),
                            CategoryId = 3,
                            EventTypeId = 4,
                            Odds = 2.3m,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.EventType", b =>
                {
                    b.Property<int>("EventTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EventTypeId");

                    b.ToTable("EventTypes");

                    b.HasData(
                        new
                        {
                            EventTypeId = 1,
                            Name = "BTTS"
                        },
                        new
                        {
                            EventTypeId = 2,
                            Name = "1X2"
                        },
                        new
                        {
                            EventTypeId = 3,
                            Name = "Over/Under Goals"
                        },
                        new
                        {
                            EventTypeId = 4,
                            Name = "Corners"
                        },
                        new
                        {
                            EventTypeId = 5,
                            Name = "Yellow Cards"
                        },
                        new
                        {
                            EventTypeId = 6,
                            Name = "Correct Score"
                        },
                        new
                        {
                            EventTypeId = 7,
                            Name = "Double Chance"
                        },
                        new
                        {
                            EventTypeId = 8,
                            Name = "First Goal Scorer"
                        },
                        new
                        {
                            EventTypeId = 9,
                            Name = "Last Goal Scorer"
                        },
                        new
                        {
                            EventTypeId = 10,
                            Name = "Player to Score Anytime"
                        },
                        new
                        {
                            EventTypeId = 11,
                            Name = "Clean Sheet"
                        },
                        new
                        {
                            EventTypeId = 12,
                            Name = "Team to Win Both Halves"
                        },
                        new
                        {
                            EventTypeId = 13,
                            Name = "Half-Time Result"
                        },
                        new
                        {
                            EventTypeId = 14,
                            Name = "Full-Time Result"
                        },
                        new
                        {
                            EventTypeId = 15,
                            Name = "Half-Time/Full-Time"
                        },
                        new
                        {
                            EventTypeId = 16,
                            Name = "Team to Score First"
                        },
                        new
                        {
                            EventTypeId = 17,
                            Name = "First Half Goals"
                        },
                        new
                        {
                            EventTypeId = 18,
                            Name = "Second Half Goals"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Bet", b =>
                {
                    b.HasOne("Domain.Entities.Bookmaker", "Bookmaker")
                        .WithMany("BetList")
                        .HasForeignKey("BookmakerId");

                    b.Navigation("Bookmaker");
                });

            modelBuilder.Entity("Domain.Entities.Event", b =>
                {
                    b.HasOne("Domain.Entities.Bet", "Bet")
                        .WithMany("EventsList")
                        .HasForeignKey("BetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bet");

                    b.Navigation("Category");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("Domain.Entities.Bet", b =>
                {
                    b.Navigation("EventsList");
                });

            modelBuilder.Entity("Domain.Entities.Bookmaker", b =>
                {
                    b.Navigation("BetList");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Domain.Entities.EventType", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
