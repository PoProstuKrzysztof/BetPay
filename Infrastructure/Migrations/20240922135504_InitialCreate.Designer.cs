// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240922135504_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Bet", b =>
                {
                    b.Property<Guid>("BetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BetDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BookmakerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsTaxIncluded")
                        .HasColumnType("bit");

                    b.Property<int>("LivePrematch")
                        .HasColumnType("int");

                    b.Property<decimal>("Stake")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("BetId");

                    b.HasIndex("BookmakerId");

                    b.ToTable("Bets");

                    b.HasData(
                        new
                        {
                            BetId = new Guid("08687ca2-81d0-4816-9f78-bdc1edb2d47d"),
                            BetDate = new DateTime(2023, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BookmakerId = 2,
                            IsTaxIncluded = true,
                            LivePrematch = 2,
                            Stake = 50m
                        },
                        new
                        {
                            BetId = new Guid("37b0f247-f7a5-4aac-b14e-5ff3f103143c"),
                            BetDate = new DateTime(2023, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BookmakerId = 3,
                            IsTaxIncluded = true,
                            LivePrematch = 2,
                            Stake = 100m
                        },
                        new
                        {
                            BetId = new Guid("e2deaa39-424e-4b0b-89e7-cda15de0b25b"),
                            BetDate = new DateTime(2023, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BookmakerId = 1,
                            IsTaxIncluded = false,
                            LivePrematch = 2,
                            Stake = 200m
                        },
                        new
                        {
                            BetId = new Guid("b1651f09-ffbb-4397-8a96-2fbc75a4809c"),
                            BetDate = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BookmakerId = 1,
                            IsTaxIncluded = false,
                            LivePrematch = 1,
                            Stake = 75m
                        },
                        new
                        {
                            BetId = new Guid("2abfae7d-ab21-471c-a37a-96f0df575054"),
                            BetDate = new DateTime(2023, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BookmakerId = 5,
                            IsTaxIncluded = true,
                            LivePrematch = 1,
                            Stake = 150m
                        });
                });

            modelBuilder.Entity("Domain.Entities.Bookmaker", b =>
                {
                    b.Property<int>("BookmakerId")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookmakerId");

                    b.ToTable("Bookmakers");

                    b.HasData(
                        new
                        {
                            BookmakerId = 1,
                            ImagePath = "/Images/Bookmakers/betclic.png",
                            Name = "Betclic"
                        },
                        new
                        {
                            BookmakerId = 2,
                            ImagePath = "/Images/Bookmakers/superbet.png",
                            Name = "Superbet"
                        },
                        new
                        {
                            BookmakerId = 3,
                            ImagePath = "/Images/Bookmakers/fortuna.png",
                            Name = "Fortuna"
                        },
                        new
                        {
                            BookmakerId = 4,
                            ImagePath = "/Images/Bookmakers/sts.png",
                            Name = "STS"
                        },
                        new
                        {
                            BookmakerId = 5,
                            ImagePath = "/Images/Bookmakers/betfan.png",
                            Name = "Betfan"
                        },
                        new
                        {
                            BookmakerId = 6,
                            ImagePath = "/Images/Bookmakers/fuksiarz.png",
                            Name = "Fuksiarz"
                        },
                        new
                        {
                            BookmakerId = 7,
                            ImagePath = "/Images/Bookmakers/lvbet.png",
                            Name = "LvBet"
                        },
                        new
                        {
                            BookmakerId = 8,
                            ImagePath = "/Images/Bookmakers/betters.png",
                            Name = "Betters"
                        },
                        new
                        {
                            BookmakerId = 9,
                            ImagePath = "/Images/Bookmakers/betcris.png",
                            Name = "Betcris"
                        },
                        new
                        {
                            BookmakerId = 10,
                            ImagePath = "/Images/Bookmakers/gobet.png",
                            Name = "GoBet"
                        },
                        new
                        {
                            BookmakerId = 11,
                            ImagePath = "/Images/Bookmakers/totalbet.png",
                            Name = "TotalBet"
                        },
                        new
                        {
                            BookmakerId = 12,
                            ImagePath = "/Images/Bookmakers/forbet.png",
                            Name = "ForBet"
                        },
                        new
                        {
                            BookmakerId = 13,
                            ImagePath = "/Images/Bookmakers/etoto.png",
                            Name = "Etoto"
                        },
                        new
                        {
                            BookmakerId = 14,
                            ImagePath = "/Images/Bookmakers/comeon.png",
                            Name = "ComeOn"
                        },
                        new
                        {
                            BookmakerId = 15,
                            ImagePath = "/Images/Bookmakers/pzbuk.png",
                            Name = "Pzbuk"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Football"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Tennis"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Basketball"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Event", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Odds")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("EventId");

                    b.HasIndex("BetId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("EventTypeId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventId = new Guid("5b81ccb0-359b-4ded-8e03-8e6dc8d40959"),
                            BetId = new Guid("08687ca2-81d0-4816-9f78-bdc1edb2d47d"),
                            CategoryId = 1,
                            EventTypeId = 1,
                            Odds = 1.5m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("5c403e6e-f4b7-47c3-a65c-732871264915"),
                            BetId = new Guid("08687ca2-81d0-4816-9f78-bdc1edb2d47d"),
                            CategoryId = 2,
                            EventTypeId = 2,
                            Odds = 2.0m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("823733d7-0f13-4a24-b03e-7bdd470d3451"),
                            BetId = new Guid("08687ca2-81d0-4816-9f78-bdc1edb2d47d"),
                            CategoryId = 3,
                            EventTypeId = 3,
                            Odds = 1.7m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("fe4bb787-3f80-4521-a996-75d45e8923af"),
                            BetId = new Guid("37b0f247-f7a5-4aac-b14e-5ff3f103143c"),
                            CategoryId = 2,
                            EventTypeId = 1,
                            Odds = 1.6m,
                            Status = 1
                        },
                        new
                        {
                            EventId = new Guid("19b3a016-e039-49be-bbb5-cfc095a7a24a"),
                            BetId = new Guid("37b0f247-f7a5-4aac-b14e-5ff3f103143c"),
                            CategoryId = 1,
                            EventTypeId = 4,
                            Odds = 2.3m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("dae0e025-e800-47d5-aa24-f4bf3a18ea9f"),
                            BetId = new Guid("37b0f247-f7a5-4aac-b14e-5ff3f103143c"),
                            CategoryId = 2,
                            EventTypeId = 5,
                            Odds = 2.1m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("3100856d-8f88-4c42-acdb-4087bffe548e"),
                            BetId = new Guid("37b0f247-f7a5-4aac-b14e-5ff3f103143c"),
                            CategoryId = 1,
                            EventTypeId = 6,
                            Odds = 1.8m,
                            Status = 2
                        },
                        new
                        {
                            EventId = new Guid("37525da5-1c03-4cfb-93fb-ed57f507daf7"),
                            BetId = new Guid("e2deaa39-424e-4b0b-89e7-cda15de0b25b"),
                            CategoryId = 2,
                            EventTypeId = 3,
                            Odds = 1.5m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("35b8614f-ceaf-4813-a614-b1fa0d88b9b1"),
                            BetId = new Guid("e2deaa39-424e-4b0b-89e7-cda15de0b25b"),
                            CategoryId = 1,
                            EventTypeId = 1,
                            Odds = 1.7m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("bf4b8267-7d3a-4168-b96a-d6045c5653a6"),
                            BetId = new Guid("e2deaa39-424e-4b0b-89e7-cda15de0b25b"),
                            CategoryId = 3,
                            EventTypeId = 4,
                            Odds = 2.4m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("bf805418-066e-4376-8d7f-cc5b5d108026"),
                            BetId = new Guid("e2deaa39-424e-4b0b-89e7-cda15de0b25b"),
                            CategoryId = 2,
                            EventTypeId = 5,
                            Odds = 2.1m,
                            Status = 2
                        },
                        new
                        {
                            EventId = new Guid("b3728fd0-22e7-4b11-8dee-1b2766236697"),
                            BetId = new Guid("e2deaa39-424e-4b0b-89e7-cda15de0b25b"),
                            CategoryId = 1,
                            EventTypeId = 6,
                            Odds = 2.5m,
                            Status = 1
                        },
                        new
                        {
                            EventId = new Guid("2ab3b3af-36a2-42aa-a9a9-e64d119b0a60"),
                            BetId = new Guid("b1651f09-ffbb-4397-8a96-2fbc75a4809c"),
                            CategoryId = 3,
                            EventTypeId = 4,
                            Odds = 2.0m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("77d1367e-03a1-406a-a949-e610b3637768"),
                            BetId = new Guid("b1651f09-ffbb-4397-8a96-2fbc75a4809c"),
                            CategoryId = 2,
                            EventTypeId = 1,
                            Odds = 1.6m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("1110967a-1c71-44a7-a622-ae147926e1da"),
                            BetId = new Guid("2abfae7d-ab21-471c-a37a-96f0df575054"),
                            CategoryId = 1,
                            EventTypeId = 3,
                            Odds = 1.9m,
                            Status = 1
                        },
                        new
                        {
                            EventId = new Guid("e3c40e8d-2540-4fa5-b027-ecea630958e8"),
                            BetId = new Guid("2abfae7d-ab21-471c-a37a-96f0df575054"),
                            CategoryId = 2,
                            EventTypeId = 2,
                            Odds = 2.2m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("28ef59d5-28c1-4854-b610-9b86a63cf258"),
                            BetId = new Guid("2abfae7d-ab21-471c-a37a-96f0df575054"),
                            CategoryId = 3,
                            EventTypeId = 5,
                            Odds = 1.5m,
                            Status = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.EventType", b =>
                {
                    b.Property<int>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EventTypeId");

                    b.HasIndex("CategoryId");

                    b.ToTable("EventTypes");

                    b.HasData(
                        new
                        {
                            EventTypeId = 1,
                            CategoryId = 1,
                            Name = "BTTS"
                        },
                        new
                        {
                            EventTypeId = 2,
                            CategoryId = 1,
                            Name = "1X2"
                        },
                        new
                        {
                            EventTypeId = 3,
                            CategoryId = 1,
                            Name = "Over/Under Goals"
                        },
                        new
                        {
                            EventTypeId = 4,
                            CategoryId = 1,
                            Name = "Corners"
                        },
                        new
                        {
                            EventTypeId = 5,
                            CategoryId = 1,
                            Name = "Yellow Cards"
                        },
                        new
                        {
                            EventTypeId = 6,
                            CategoryId = 1,
                            Name = "Correct Score"
                        },
                        new
                        {
                            EventTypeId = 7,
                            CategoryId = 1,
                            Name = "Double Chance"
                        },
                        new
                        {
                            EventTypeId = 8,
                            CategoryId = 1,
                            Name = "First Goal Scorer"
                        },
                        new
                        {
                            EventTypeId = 9,
                            CategoryId = 1,
                            Name = "Last Goal Scorer"
                        },
                        new
                        {
                            EventTypeId = 10,
                            CategoryId = 1,
                            Name = "Player to Score Anytime"
                        },
                        new
                        {
                            EventTypeId = 11,
                            CategoryId = 1,
                            Name = "Clean Sheet"
                        },
                        new
                        {
                            EventTypeId = 12,
                            CategoryId = 1,
                            Name = "Team to Win Both Halves"
                        },
                        new
                        {
                            EventTypeId = 13,
                            CategoryId = 1,
                            Name = "Half-Time Result"
                        },
                        new
                        {
                            EventTypeId = 14,
                            CategoryId = 1,
                            Name = "Full-Time Result"
                        },
                        new
                        {
                            EventTypeId = 15,
                            CategoryId = 1,
                            Name = "Half-Time/Full-Time"
                        },
                        new
                        {
                            EventTypeId = 16,
                            CategoryId = 1,
                            Name = "Team to Score First"
                        },
                        new
                        {
                            EventTypeId = 17,
                            CategoryId = 1,
                            Name = "First Half Goals"
                        },
                        new
                        {
                            EventTypeId = 18,
                            CategoryId = 1,
                            Name = "Second Half Goals"
                        },
                        new
                        {
                            EventTypeId = 19,
                            CategoryId = 2,
                            Name = "Total Aces"
                        },
                        new
                        {
                            EventTypeId = 20,
                            CategoryId = 2,
                            Name = "Total Double Faults"
                        },
                        new
                        {
                            EventTypeId = 21,
                            CategoryId = 2,
                            Name = "Set Winner"
                        },
                        new
                        {
                            EventTypeId = 22,
                            CategoryId = 2,
                            Name = "Match Winner"
                        },
                        new
                        {
                            EventTypeId = 23,
                            CategoryId = 2,
                            Name = "First Set Winner"
                        },
                        new
                        {
                            EventTypeId = 24,
                            CategoryId = 2,
                            Name = "Total Games Over/Under"
                        },
                        new
                        {
                            EventTypeId = 25,
                            CategoryId = 3,
                            Name = "First Basket Scorer"
                        },
                        new
                        {
                            EventTypeId = 26,
                            CategoryId = 3,
                            Name = "Total Points Over/Under"
                        },
                        new
                        {
                            EventTypeId = 27,
                            CategoryId = 3,
                            Name = "Winning Margin"
                        },
                        new
                        {
                            EventTypeId = 28,
                            CategoryId = 3,
                            Name = "Most Assists"
                        },
                        new
                        {
                            EventTypeId = 29,
                            CategoryId = 3,
                            Name = "Total Rebounds"
                        },
                        new
                        {
                            EventTypeId = 30,
                            CategoryId = 3,
                            Name = "First Team to Score 20 Points"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Bet", b =>
                {
                    b.HasOne("Domain.Entities.Bookmaker", "Bookmaker")
                        .WithMany("BetList")
                        .HasForeignKey("BookmakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bookmaker");
                });

            modelBuilder.Entity("Domain.Entities.Event", b =>
                {
                    b.HasOne("Domain.Entities.Bet", "Bet")
                        .WithMany("EventsList")
                        .HasForeignKey("BetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bet");

                    b.Navigation("Category");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("Domain.Entities.EventType", b =>
                {
                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("EventTypes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Entities.Bet", b =>
                {
                    b.Navigation("EventsList");
                });

            modelBuilder.Entity("Domain.Entities.Bookmaker", b =>
                {
                    b.Navigation("BetList");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Navigation("EventTypes");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("Domain.Entities.EventType", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
