// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Bet", b =>
                {
                    b.Property<Guid>("BetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BetDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BookmakerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsTaxIncluded")
                        .HasColumnType("bit");

                    b.Property<decimal>("Stake")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("BetId");

                    b.HasIndex("BookmakerId");

                    b.ToTable("Bets");

                    b.HasData(
                        new
                        {
                            BetId = new Guid("88992eca-f894-4176-8c67-55c6ac5ae202"),
                            BetDate = new DateTime(2024, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BookmakerId = 2,
                            IsTaxIncluded = true,
                            Stake = 50m
                        },
                        new
                        {
                            BetId = new Guid("8477d938-3269-4c5c-a9ab-7fd8d1031428"),
                            BetDate = new DateTime(2024, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BookmakerId = 3,
                            IsTaxIncluded = true,
                            Stake = 100m
                        },
                        new
                        {
                            BetId = new Guid("119d366d-790d-4c6e-a314-3ab01bb479d1"),
                            BetDate = new DateTime(2024, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BookmakerId = 2,
                            IsTaxIncluded = true,
                            Stake = 200m
                        },
                        new
                        {
                            BetId = new Guid("4b3a30ec-31f9-49c2-afdd-b0e4d9b07c9a"),
                            BetDate = new DateTime(2024, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BookmakerId = 1,
                            IsTaxIncluded = false,
                            Stake = 75m
                        },
                        new
                        {
                            BetId = new Guid("3196411c-96e9-4801-82db-d71a4e15898a"),
                            BetDate = new DateTime(2024, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BookmakerId = 4,
                            IsTaxIncluded = true,
                            Stake = 150m
                        });
                });

            modelBuilder.Entity("Domain.Entities.Bookmaker", b =>
                {
                    b.Property<int>("BookmakerId")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookmakerId");

                    b.ToTable("Bookmakers");

                    b.HasData(
                        new
                        {
                            BookmakerId = 1,
                            ImagePath = "/Images/Bookmakers/betclic-icon.jpg",
                            Name = "Betclic"
                        },
                        new
                        {
                            BookmakerId = 2,
                            Name = "Superbet"
                        },
                        new
                        {
                            BookmakerId = 3,
                            Name = "Fortuna"
                        },
                        new
                        {
                            BookmakerId = 4,
                            Name = "STS"
                        },
                        new
                        {
                            BookmakerId = 5,
                            Name = "Betfan"
                        },
                        new
                        {
                            BookmakerId = 6,
                            Name = "Fuksiarz"
                        },
                        new
                        {
                            BookmakerId = 7,
                            Name = "LvBet"
                        },
                        new
                        {
                            BookmakerId = 8,
                            Name = "Betters"
                        },
                        new
                        {
                            BookmakerId = 9,
                            Name = "Betcris"
                        },
                        new
                        {
                            BookmakerId = 10,
                            Name = "GoBet"
                        },
                        new
                        {
                            BookmakerId = 11,
                            Name = "TotalBet"
                        },
                        new
                        {
                            BookmakerId = 12,
                            Name = "ForBet"
                        },
                        new
                        {
                            BookmakerId = 13,
                            Name = "Etoto"
                        },
                        new
                        {
                            BookmakerId = 14,
                            Name = "ComeOn"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Football"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Soccer"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Tennis"
                        },
                        new
                        {
                            CategoryId = 4,
                            Name = "Basketball"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Event", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Odds")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("EventId");

                    b.HasIndex("BetId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("EventTypeId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventId = new Guid("82b8818b-39d5-4630-be91-57bdede8dcce"),
                            BetId = new Guid("88992eca-f894-4176-8c67-55c6ac5ae202"),
                            CategoryId = 1,
                            EventTypeId = 1,
                            Odds = 1.5m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("77fef067-022f-4399-9e34-67bbf8668d6b"),
                            BetId = new Guid("88992eca-f894-4176-8c67-55c6ac5ae202"),
                            CategoryId = 2,
                            EventTypeId = 2,
                            Odds = 2.0m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("5ee05351-240c-45f5-8bb1-eaeba3d95f26"),
                            BetId = new Guid("8477d938-3269-4c5c-a9ab-7fd8d1031428"),
                            CategoryId = 1,
                            EventTypeId = 3,
                            Odds = 1.8m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("976e7541-2219-4d26-bf7c-2bc9eb3310cc"),
                            BetId = new Guid("8477d938-3269-4c5c-a9ab-7fd8d1031428"),
                            CategoryId = 3,
                            EventTypeId = 4,
                            Odds = 2.2m,
                            Status = 1
                        },
                        new
                        {
                            EventId = new Guid("0e5619ae-5944-495c-93e4-8e799f87e7d8"),
                            BetId = new Guid("119d366d-790d-4c6e-a314-3ab01bb479d1"),
                            CategoryId = 2,
                            EventTypeId = 1,
                            Odds = 1.6m,
                            Status = 2
                        },
                        new
                        {
                            EventId = new Guid("b618d659-9482-41a2-b1f8-37d1d830c6db"),
                            BetId = new Guid("119d366d-790d-4c6e-a314-3ab01bb479d1"),
                            CategoryId = 1,
                            EventTypeId = 3,
                            Odds = 2.5m,
                            Status = 2
                        },
                        new
                        {
                            EventId = new Guid("467df1db-38ba-4d23-b348-f2e497ac249d"),
                            BetId = new Guid("4b3a30ec-31f9-49c2-afdd-b0e4d9b07c9a"),
                            CategoryId = 3,
                            EventTypeId = 4,
                            Odds = 2.0m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("b414e518-0500-4688-9d28-06c80d13f58a"),
                            BetId = new Guid("4b3a30ec-31f9-49c2-afdd-b0e4d9b07c9a"),
                            CategoryId = 2,
                            EventTypeId = 2,
                            Odds = 1.7m,
                            Status = 2
                        },
                        new
                        {
                            EventId = new Guid("c89b8292-0e03-4c45-bc51-95b202783508"),
                            BetId = new Guid("3196411c-96e9-4801-82db-d71a4e15898a"),
                            CategoryId = 1,
                            EventTypeId = 3,
                            Odds = 2.1m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("fe70ff17-cdef-432f-a15c-3c3ba9d02f2e"),
                            BetId = new Guid("3196411c-96e9-4801-82db-d71a4e15898a"),
                            CategoryId = 3,
                            EventTypeId = 4,
                            Odds = 2.3m,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.EventType", b =>
                {
                    b.Property<int>("EventTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EventTypeId");

                    b.ToTable("EventTypes");

                    b.HasData(
                        new
                        {
                            EventTypeId = 1,
                            Name = "BTTS"
                        },
                        new
                        {
                            EventTypeId = 2,
                            Name = "1X2"
                        },
                        new
                        {
                            EventTypeId = 3,
                            Name = "Over/Under Goals"
                        },
                        new
                        {
                            EventTypeId = 4,
                            Name = "Corners"
                        },
                        new
                        {
                            EventTypeId = 5,
                            Name = "Yellow Cards"
                        },
                        new
                        {
                            EventTypeId = 6,
                            Name = "Correct Score"
                        },
                        new
                        {
                            EventTypeId = 7,
                            Name = "Double Chance"
                        },
                        new
                        {
                            EventTypeId = 8,
                            Name = "First Goal Scorer"
                        },
                        new
                        {
                            EventTypeId = 9,
                            Name = "Last Goal Scorer"
                        },
                        new
                        {
                            EventTypeId = 10,
                            Name = "Player to Score Anytime"
                        },
                        new
                        {
                            EventTypeId = 11,
                            Name = "Clean Sheet"
                        },
                        new
                        {
                            EventTypeId = 12,
                            Name = "Team to Win Both Halves"
                        },
                        new
                        {
                            EventTypeId = 13,
                            Name = "Half-Time Result"
                        },
                        new
                        {
                            EventTypeId = 14,
                            Name = "Full-Time Result"
                        },
                        new
                        {
                            EventTypeId = 15,
                            Name = "Half-Time/Full-Time"
                        },
                        new
                        {
                            EventTypeId = 16,
                            Name = "Team to Score First"
                        },
                        new
                        {
                            EventTypeId = 17,
                            Name = "First Half Goals"
                        },
                        new
                        {
                            EventTypeId = 18,
                            Name = "Second Half Goals"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Bet", b =>
                {
                    b.HasOne("Domain.Entities.Bookmaker", "Bookmaker")
                        .WithMany("BetList")
                        .HasForeignKey("BookmakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bookmaker");
                });

            modelBuilder.Entity("Domain.Entities.Event", b =>
                {
                    b.HasOne("Domain.Entities.Bet", "Bet")
                        .WithMany("EventsList")
                        .HasForeignKey("BetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bet");

                    b.Navigation("Category");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("Domain.Entities.Bet", b =>
                {
                    b.Navigation("EventsList");
                });

            modelBuilder.Entity("Domain.Entities.Bookmaker", b =>
                {
                    b.Navigation("BetList");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Domain.Entities.EventType", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
