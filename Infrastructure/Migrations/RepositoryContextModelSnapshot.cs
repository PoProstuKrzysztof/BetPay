// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Bet", b =>
                {
                    b.Property<Guid>("BetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BetDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("BookmakerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsTaxIncluded")
                        .HasColumnType("bit");

                    b.Property<decimal>("Stake")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("BetId");

                    b.HasIndex("BookmakerId");

                    b.ToTable("Bets");

                    b.HasData(
                        new
                        {
                            BetId = new Guid("75c2704b-9fd8-48fa-b01d-ee19638cea39"),
                            BetDate = new DateTime(2024, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BookmakerId = 2,
                            IsTaxIncluded = true,
                            Stake = 50m,
                            Status = 2
                        },
                        new
                        {
                            BetId = new Guid("f787d8aa-a9ec-4aa9-96c6-851a12763b65"),
                            BetDate = new DateTime(2024, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BookmakerId = 3,
                            IsTaxIncluded = true,
                            Stake = 100m,
                            Status = 2
                        },
                        new
                        {
                            BetId = new Guid("b3717315-0d53-4b88-be01-e51996270074"),
                            BetDate = new DateTime(2024, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BookmakerId = 2,
                            IsTaxIncluded = true,
                            Stake = 200m,
                            Status = 2
                        },
                        new
                        {
                            BetId = new Guid("5a768bea-7dc5-4bbe-b445-fab4828a79c3"),
                            BetDate = new DateTime(2024, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BookmakerId = 1,
                            IsTaxIncluded = false,
                            Stake = 75m,
                            Status = 2
                        },
                        new
                        {
                            BetId = new Guid("fb8088cc-2d10-4751-b8b2-d3740ac63c5c"),
                            BetDate = new DateTime(2024, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BookmakerId = 4,
                            IsTaxIncluded = true,
                            Stake = 150m,
                            Status = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.Bookmaker", b =>
                {
                    b.Property<int>("BookmakerId")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookmakerId");

                    b.ToTable("Bookmakers");

                    b.HasData(
                        new
                        {
                            BookmakerId = 1,
                            Name = "Betclic"
                        },
                        new
                        {
                            BookmakerId = 2,
                            Name = "Superbet"
                        },
                        new
                        {
                            BookmakerId = 3,
                            Name = "Fortuna"
                        },
                        new
                        {
                            BookmakerId = 4,
                            Name = "STS"
                        },
                        new
                        {
                            BookmakerId = 5,
                            Name = "Betfan"
                        },
                        new
                        {
                            BookmakerId = 6,
                            Name = "Fuksiarz"
                        },
                        new
                        {
                            BookmakerId = 7,
                            Name = "LvBet"
                        },
                        new
                        {
                            BookmakerId = 8,
                            Name = "Betters"
                        },
                        new
                        {
                            BookmakerId = 9,
                            Name = "Betcris"
                        },
                        new
                        {
                            BookmakerId = 10,
                            Name = "GoBet"
                        },
                        new
                        {
                            BookmakerId = 11,
                            Name = "TotalBet"
                        },
                        new
                        {
                            BookmakerId = 12,
                            Name = "ForBet"
                        },
                        new
                        {
                            BookmakerId = 13,
                            Name = "Etoto"
                        },
                        new
                        {
                            BookmakerId = 14,
                            Name = "ComeOn"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Football"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Soccer"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Tennis"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Event", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Odds")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("EventId");

                    b.HasIndex("BetId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("EventTypeId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventId = new Guid("d71e7dd1-9d2e-4444-84de-05dab9feb2d2"),
                            BetId = new Guid("75c2704b-9fd8-48fa-b01d-ee19638cea39"),
                            CategoryId = 1,
                            EventTypeId = 1,
                            Odds = 1.5m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("8d26049f-da69-478b-8a12-eb2faaaeda85"),
                            BetId = new Guid("75c2704b-9fd8-48fa-b01d-ee19638cea39"),
                            CategoryId = 2,
                            EventTypeId = 2,
                            Odds = 2.0m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("9e0c814e-51b4-4fbf-bc42-cbf39d56077b"),
                            BetId = new Guid("f787d8aa-a9ec-4aa9-96c6-851a12763b65"),
                            CategoryId = 1,
                            EventTypeId = 3,
                            Odds = 1.8m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("9b400e87-692b-4759-a767-b77f3f4732b7"),
                            BetId = new Guid("f787d8aa-a9ec-4aa9-96c6-851a12763b65"),
                            CategoryId = 3,
                            EventTypeId = 4,
                            Odds = 2.2m,
                            Status = 1
                        },
                        new
                        {
                            EventId = new Guid("5d8368f1-6358-4b6c-91cd-2eafa01a3be6"),
                            BetId = new Guid("b3717315-0d53-4b88-be01-e51996270074"),
                            CategoryId = 2,
                            EventTypeId = 1,
                            Odds = 1.6m,
                            Status = 2
                        },
                        new
                        {
                            EventId = new Guid("f637ed41-7131-438f-a3c7-3af918b9f55c"),
                            BetId = new Guid("b3717315-0d53-4b88-be01-e51996270074"),
                            CategoryId = 1,
                            EventTypeId = 3,
                            Odds = 2.5m,
                            Status = 2
                        },
                        new
                        {
                            EventId = new Guid("f32ba145-6707-4eee-b494-a4916797ec21"),
                            BetId = new Guid("5a768bea-7dc5-4bbe-b445-fab4828a79c3"),
                            CategoryId = 3,
                            EventTypeId = 4,
                            Odds = 2.0m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("057c0ab4-bfea-425d-97dd-f2479fb3ec64"),
                            BetId = new Guid("5a768bea-7dc5-4bbe-b445-fab4828a79c3"),
                            CategoryId = 2,
                            EventTypeId = 2,
                            Odds = 1.7m,
                            Status = 2
                        },
                        new
                        {
                            EventId = new Guid("8811255d-aaaf-4477-ab9d-e692f0db017e"),
                            BetId = new Guid("fb8088cc-2d10-4751-b8b2-d3740ac63c5c"),
                            CategoryId = 1,
                            EventTypeId = 3,
                            Odds = 2.1m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("01195be5-7f3e-4be4-9945-15a88f03f066"),
                            BetId = new Guid("fb8088cc-2d10-4751-b8b2-d3740ac63c5c"),
                            CategoryId = 3,
                            EventTypeId = 4,
                            Odds = 2.3m,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.EventType", b =>
                {
                    b.Property<int>("EventTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EventTypeId");

                    b.ToTable("EventTypes");

                    b.HasData(
                        new
                        {
                            EventTypeId = 1,
                            Name = "BTTS"
                        },
                        new
                        {
                            EventTypeId = 2,
                            Name = "Statistical"
                        },
                        new
                        {
                            EventTypeId = 3,
                            Name = "1X2"
                        },
                        new
                        {
                            EventTypeId = 4,
                            Name = "Above/Under"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Bet", b =>
                {
                    b.HasOne("Domain.Entities.Bookmaker", "Bookmaker")
                        .WithMany("BetList")
                        .HasForeignKey("BookmakerId");

                    b.Navigation("Bookmaker");
                });

            modelBuilder.Entity("Domain.Entities.Event", b =>
                {
                    b.HasOne("Domain.Entities.Bet", "Bet")
                        .WithMany("EventsList")
                        .HasForeignKey("BetId");

                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bet");

                    b.Navigation("Category");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("Domain.Entities.Bet", b =>
                {
                    b.Navigation("EventsList");
                });

            modelBuilder.Entity("Domain.Entities.Bookmaker", b =>
                {
                    b.Navigation("BetList");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Domain.Entities.EventType", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
