// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Bet", b =>
                {
                    b.Property<Guid>("BetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BetDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("BookmakerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsTaxIncluded")
                        .HasColumnType("bit");

                    b.Property<decimal>("Stake")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("BetId");

                    b.HasIndex("BookmakerId");

                    b.ToTable("Bets");

                    b.HasData(
                        new
                        {
                            BetId = new Guid("3456b480-cae4-4f7c-8ea7-0eb2b59f3729"),
                            BetDate = new DateTime(2024, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BookmakerId = 2,
                            IsTaxIncluded = true,
                            Stake = 50m,
                            Status = 2
                        },
                        new
                        {
                            BetId = new Guid("d02d02a6-7675-487e-82d1-f88957f40b73"),
                            BetDate = new DateTime(2024, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BookmakerId = 3,
                            IsTaxIncluded = true,
                            Stake = 100m,
                            Status = 2
                        },
                        new
                        {
                            BetId = new Guid("9c98dfb8-a1d8-4c1c-9578-b5be275e91c1"),
                            BetDate = new DateTime(2024, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BookmakerId = 2,
                            IsTaxIncluded = true,
                            Stake = 200m,
                            Status = 2
                        },
                        new
                        {
                            BetId = new Guid("9de8a868-a069-4ed8-8509-8e14e344922b"),
                            BetDate = new DateTime(2024, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BookmakerId = 1,
                            IsTaxIncluded = false,
                            Stake = 75m,
                            Status = 2
                        },
                        new
                        {
                            BetId = new Guid("79c7f426-642a-485d-a336-d0b7c4a16221"),
                            BetDate = new DateTime(2024, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BookmakerId = 4,
                            IsTaxIncluded = true,
                            Stake = 150m,
                            Status = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.Bookmaker", b =>
                {
                    b.Property<int>("BookmakerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookmakerId"));

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookmakerId");

                    b.ToTable("Bookmakers");

                    b.HasData(
                        new
                        {
                            BookmakerId = 1,
                            Name = "Betclic"
                        },
                        new
                        {
                            BookmakerId = 2,
                            Name = "Superbet"
                        },
                        new
                        {
                            BookmakerId = 3,
                            Name = "Fortuna"
                        },
                        new
                        {
                            BookmakerId = 4,
                            Name = "STS"
                        },
                        new
                        {
                            BookmakerId = 5,
                            Name = "Betfan"
                        },
                        new
                        {
                            BookmakerId = 6,
                            Name = "Fuksiarz"
                        },
                        new
                        {
                            BookmakerId = 7,
                            Name = "LvBet"
                        },
                        new
                        {
                            BookmakerId = 8,
                            Name = "Betters"
                        },
                        new
                        {
                            BookmakerId = 9,
                            Name = "Betcris"
                        },
                        new
                        {
                            BookmakerId = 10,
                            Name = "GoBet"
                        },
                        new
                        {
                            BookmakerId = 11,
                            Name = "TotalBet"
                        },
                        new
                        {
                            BookmakerId = 12,
                            Name = "ForBet"
                        },
                        new
                        {
                            BookmakerId = 13,
                            Name = "Etoto"
                        },
                        new
                        {
                            BookmakerId = 14,
                            Name = "ComeOn"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Football"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Soccer"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Tennis"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Event", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Odds")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("EventId");

                    b.HasIndex("BetId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("EventTypeId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventId = new Guid("8a0f3d52-78ce-4669-a2a2-525ccd18cff7"),
                            BetId = new Guid("3456b480-cae4-4f7c-8ea7-0eb2b59f3729"),
                            CategoryId = 1,
                            EventTypeId = 1,
                            Odds = 1.5m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("3497dddd-1d2f-49f0-88e2-bbe02af4fb07"),
                            BetId = new Guid("3456b480-cae4-4f7c-8ea7-0eb2b59f3729"),
                            CategoryId = 2,
                            EventTypeId = 2,
                            Odds = 2.0m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("ef60c06e-ed3b-42c2-b8f7-2c01c875a6c5"),
                            BetId = new Guid("d02d02a6-7675-487e-82d1-f88957f40b73"),
                            CategoryId = 1,
                            EventTypeId = 3,
                            Odds = 1.8m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("953ef1be-60d0-4aa4-94e0-383cb6cb2378"),
                            BetId = new Guid("d02d02a6-7675-487e-82d1-f88957f40b73"),
                            CategoryId = 3,
                            EventTypeId = 4,
                            Odds = 2.2m,
                            Status = 1
                        },
                        new
                        {
                            EventId = new Guid("db9abc7c-8fbf-40b4-9770-cd1c70d665b0"),
                            BetId = new Guid("9c98dfb8-a1d8-4c1c-9578-b5be275e91c1"),
                            CategoryId = 2,
                            EventTypeId = 1,
                            Odds = 1.6m,
                            Status = 2
                        },
                        new
                        {
                            EventId = new Guid("9f56b533-8578-4a3b-a5be-57db33445653"),
                            BetId = new Guid("9c98dfb8-a1d8-4c1c-9578-b5be275e91c1"),
                            CategoryId = 1,
                            EventTypeId = 3,
                            Odds = 2.5m,
                            Status = 2
                        },
                        new
                        {
                            EventId = new Guid("2a9a7536-e881-4c16-bf25-a7bf0259b6c8"),
                            BetId = new Guid("9de8a868-a069-4ed8-8509-8e14e344922b"),
                            CategoryId = 3,
                            EventTypeId = 4,
                            Odds = 2.0m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("10b2bc74-2349-4c65-9742-4a7b35f78f19"),
                            BetId = new Guid("9de8a868-a069-4ed8-8509-8e14e344922b"),
                            CategoryId = 2,
                            EventTypeId = 2,
                            Odds = 1.7m,
                            Status = 2
                        },
                        new
                        {
                            EventId = new Guid("071580ce-a269-4d5d-82f2-9f4a3be58e23"),
                            BetId = new Guid("79c7f426-642a-485d-a336-d0b7c4a16221"),
                            CategoryId = 1,
                            EventTypeId = 3,
                            Odds = 2.1m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("a4db33e8-c219-42ac-8149-5e5e72549215"),
                            BetId = new Guid("79c7f426-642a-485d-a336-d0b7c4a16221"),
                            CategoryId = 3,
                            EventTypeId = 4,
                            Odds = 2.3m,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.EventType", b =>
                {
                    b.Property<int>("EventTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EventTypeId");

                    b.ToTable("EventTypes");

                    b.HasData(
                        new
                        {
                            EventTypeId = 1,
                            Name = "BTTS"
                        },
                        new
                        {
                            EventTypeId = 2,
                            Name = "Statistical"
                        },
                        new
                        {
                            EventTypeId = 3,
                            Name = "1X2"
                        },
                        new
                        {
                            EventTypeId = 4,
                            Name = "Above/Under"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Bet", b =>
                {
                    b.HasOne("Domain.Entities.Bookmaker", "Bookmaker")
                        .WithMany("BetList")
                        .HasForeignKey("BookmakerId");

                    b.Navigation("Bookmaker");
                });

            modelBuilder.Entity("Domain.Entities.Event", b =>
                {
                    b.HasOne("Domain.Entities.Bet", "Bet")
                        .WithMany("EventsList")
                        .HasForeignKey("BetId");

                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bet");

                    b.Navigation("Category");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("Domain.Entities.Bet", b =>
                {
                    b.Navigation("EventsList");
                });

            modelBuilder.Entity("Domain.Entities.Bookmaker", b =>
                {
                    b.Navigation("BetList");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Domain.Entities.EventType", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
