// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Bet", b =>
                {
                    b.Property<Guid>("BetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BetDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Bookmaker")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsTaxIncluded")
                        .HasColumnType("bit");

                    b.Property<decimal>("Stake")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("BetId");

                    b.ToTable("Bets");

                    b.HasData(
                        new
                        {
                            BetId = new Guid("015bad62-91c7-4fae-a449-5be0457f3f98"),
                            BetDate = new DateTime(2024, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Bookmaker = "SUPERBET",
                            IsTaxIncluded = true,
                            Stake = 50m,
                            Status = 2
                        },
                        new
                        {
                            BetId = new Guid("f1c9658e-4e32-405b-9b7d-518800e1b64c"),
                            BetDate = new DateTime(2024, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Bookmaker = "STS",
                            IsTaxIncluded = true,
                            Stake = 100m,
                            Status = 2
                        },
                        new
                        {
                            BetId = new Guid("9a7e6f75-7b74-4f9f-a07f-4a27de8972be"),
                            BetDate = new DateTime(2024, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Bookmaker = "FORTUNA",
                            IsTaxIncluded = true,
                            Stake = 200m,
                            Status = 2
                        },
                        new
                        {
                            BetId = new Guid("cb46de97-2c16-46f5-a9c2-569e3a4926ad"),
                            BetDate = new DateTime(2024, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Bookmaker = "BETCLIC",
                            IsTaxIncluded = false,
                            Stake = 75m,
                            Status = 2
                        },
                        new
                        {
                            BetId = new Guid("f6bd5e7a-9b6d-45bc-b8cc-0ecb390243dd"),
                            BetDate = new DateTime(2024, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Bookmaker = "BETFAN",
                            IsTaxIncluded = true,
                            Stake = 150m,
                            Status = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Football"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Soccer"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Tennis"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Event", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Odds")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("EventId");

                    b.HasIndex("BetId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("EventTypeId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventId = new Guid("2c838f49-e594-4cb3-877c-c9821e912c2e"),
                            BetId = new Guid("015bad62-91c7-4fae-a449-5be0457f3f98"),
                            CategoryId = 1,
                            EventTypeId = 1,
                            Odds = 1.5m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("3c2ebcde-7914-41bd-9287-6fe85d5e1d81"),
                            BetId = new Guid("015bad62-91c7-4fae-a449-5be0457f3f98"),
                            CategoryId = 2,
                            EventTypeId = 2,
                            Odds = 2.0m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("965182d1-eac8-460a-9b89-139e5a942e52"),
                            BetId = new Guid("f1c9658e-4e32-405b-9b7d-518800e1b64c"),
                            CategoryId = 1,
                            EventTypeId = 3,
                            Odds = 1.8m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("3ebaffe4-5286-4157-8274-d1e907b5a40f"),
                            BetId = new Guid("f1c9658e-4e32-405b-9b7d-518800e1b64c"),
                            CategoryId = 3,
                            EventTypeId = 4,
                            Odds = 2.2m,
                            Status = 1
                        },
                        new
                        {
                            EventId = new Guid("9a47d4c2-11ac-4c60-9f3b-41175eb98dfb"),
                            BetId = new Guid("9a7e6f75-7b74-4f9f-a07f-4a27de8972be"),
                            CategoryId = 2,
                            EventTypeId = 1,
                            Odds = 1.6m,
                            Status = 2
                        },
                        new
                        {
                            EventId = new Guid("d052d5d3-8386-44e1-bd14-6db8846cddb3"),
                            BetId = new Guid("9a7e6f75-7b74-4f9f-a07f-4a27de8972be"),
                            CategoryId = 1,
                            EventTypeId = 3,
                            Odds = 2.5m,
                            Status = 2
                        },
                        new
                        {
                            EventId = new Guid("d14ad669-9356-40e5-b74e-59ba7023d8ff"),
                            BetId = new Guid("cb46de97-2c16-46f5-a9c2-569e3a4926ad"),
                            CategoryId = 3,
                            EventTypeId = 4,
                            Odds = 2.0m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("1d5660b7-b7e9-404e-8d14-121c385dd125"),
                            BetId = new Guid("cb46de97-2c16-46f5-a9c2-569e3a4926ad"),
                            CategoryId = 2,
                            EventTypeId = 2,
                            Odds = 1.7m,
                            Status = 2
                        },
                        new
                        {
                            EventId = new Guid("22f0084d-490d-4c52-bcf0-6f00e24d59a0"),
                            BetId = new Guid("f6bd5e7a-9b6d-45bc-b8cc-0ecb390243dd"),
                            CategoryId = 1,
                            EventTypeId = 3,
                            Odds = 2.1m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("91611eef-bf4f-480c-9ab0-152871e946b4"),
                            BetId = new Guid("f6bd5e7a-9b6d-45bc-b8cc-0ecb390243dd"),
                            CategoryId = 3,
                            EventTypeId = 4,
                            Odds = 2.3m,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.EventType", b =>
                {
                    b.Property<int>("EventTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EventTypeId");

                    b.ToTable("EventTypes");

                    b.HasData(
                        new
                        {
                            EventTypeId = 1,
                            Name = "BTTS"
                        },
                        new
                        {
                            EventTypeId = 2,
                            Name = "Statistical"
                        },
                        new
                        {
                            EventTypeId = 3,
                            Name = "1X2"
                        },
                        new
                        {
                            EventTypeId = 4,
                            Name = "Above/Under"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Event", b =>
                {
                    b.HasOne("Domain.Entities.Bet", "Bet")
                        .WithMany("EventsList")
                        .HasForeignKey("BetId");

                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bet");

                    b.Navigation("Category");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("Domain.Entities.Bet", b =>
                {
                    b.Navigation("EventsList");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Domain.Entities.EventType", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
