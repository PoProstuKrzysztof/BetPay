// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Bet", b =>
                {
                    b.Property<Guid>("BetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BetDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BookmakerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsTaxIncluded")
                        .HasColumnType("bit");

                    b.Property<int>("LivePrematch")
                        .HasColumnType("int");

                    b.Property<decimal>("Stake")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("BetId");

                    b.HasIndex("BookmakerId");

                    b.ToTable("Bets");

                    b.HasData(
                        new
                        {
                            BetId = new Guid("1fe6ad59-16e3-465e-bfc4-ba99030a5f9d"),
                            BetDate = new DateTime(2023, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BookmakerId = 2,
                            IsTaxIncluded = true,
                            LivePrematch = 2,
                            Stake = 50m
                        },
                        new
                        {
                            BetId = new Guid("0a50eda4-ce05-4c73-914e-e35f37227d27"),
                            BetDate = new DateTime(2023, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BookmakerId = 3,
                            IsTaxIncluded = true,
                            LivePrematch = 2,
                            Stake = 100m
                        },
                        new
                        {
                            BetId = new Guid("71cc4ab8-9fe0-4925-8c8b-e0acc8c7ef2c"),
                            BetDate = new DateTime(2023, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BookmakerId = 1,
                            IsTaxIncluded = false,
                            LivePrematch = 2,
                            Stake = 200m
                        },
                        new
                        {
                            BetId = new Guid("01418e64-446a-42c9-9a88-fec52649f3f0"),
                            BetDate = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BookmakerId = 1,
                            IsTaxIncluded = false,
                            LivePrematch = 1,
                            Stake = 75m
                        },
                        new
                        {
                            BetId = new Guid("5f150559-7a21-489f-ae6c-673ed010918a"),
                            BetDate = new DateTime(2023, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BookmakerId = 5,
                            IsTaxIncluded = true,
                            LivePrematch = 1,
                            Stake = 150m
                        });
                });

            modelBuilder.Entity("Domain.Entities.Bookmaker", b =>
                {
                    b.Property<int>("BookmakerId")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookmakerId");

                    b.ToTable("Bookmakers");

                    b.HasData(
                        new
                        {
                            BookmakerId = 1,
                            ImagePath = "/Images/Bookmakers/betclic-icon.jpg",
                            Name = "Betclic"
                        },
                        new
                        {
                            BookmakerId = 2,
                            ImagePath = "/Images/Bookmakers/superbet-icon.jpg",
                            Name = "Superbet"
                        },
                        new
                        {
                            BookmakerId = 3,
                            ImagePath = "/Images/Bookmakers/fortuna-icon.jpg",
                            Name = "Fortuna"
                        },
                        new
                        {
                            BookmakerId = 4,
                            ImagePath = "/Images/Bookmakers/sts-icon.jpg",
                            Name = "STS"
                        },
                        new
                        {
                            BookmakerId = 5,
                            ImagePath = "/Images/Bookmakers/betfan-icon.jpg",
                            Name = "Betfan"
                        },
                        new
                        {
                            BookmakerId = 6,
                            ImagePath = "/Images/Bookmakers/fuksiarz-icon.jpg",
                            Name = "Fuksiarz"
                        },
                        new
                        {
                            BookmakerId = 7,
                            ImagePath = "/Images/Bookmakers/lvbet-icon.jpg",
                            Name = "LvBet"
                        },
                        new
                        {
                            BookmakerId = 8,
                            ImagePath = "/Images/Bookmakers/betters-icon.jpg",
                            Name = "Betters"
                        },
                        new
                        {
                            BookmakerId = 9,
                            ImagePath = "/Images/Bookmakers/betcris-icon.jpg",
                            Name = "Betcris"
                        },
                        new
                        {
                            BookmakerId = 10,
                            ImagePath = "/Images/Bookmakers/gobet-icon.jpg",
                            Name = "GoBet"
                        },
                        new
                        {
                            BookmakerId = 11,
                            ImagePath = "/Images/Bookmakers/totalbet-icon.jpg",
                            Name = "TotalBet"
                        },
                        new
                        {
                            BookmakerId = 12,
                            ImagePath = "/Images/Bookmakers/forbet-icon.jpg",
                            Name = "ForBet"
                        },
                        new
                        {
                            BookmakerId = 13,
                            ImagePath = "/Images/Bookmakers/etoto-icon.jpg",
                            Name = "Etoto"
                        },
                        new
                        {
                            BookmakerId = 14,
                            ImagePath = "/Images/Bookmakers/ComeOn-icon.jpg",
                            Name = "ComeOn"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Football"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Tennis"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Basketball"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Event", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Odds")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("EventId");

                    b.HasIndex("BetId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("EventTypeId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventId = new Guid("81130f25-3d3b-4a95-820f-7352607cd045"),
                            BetId = new Guid("1fe6ad59-16e3-465e-bfc4-ba99030a5f9d"),
                            CategoryId = 1,
                            EventTypeId = 1,
                            Odds = 1.5m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("3cd1f025-ffaa-4b4f-8f67-f42d15d6fe0d"),
                            BetId = new Guid("1fe6ad59-16e3-465e-bfc4-ba99030a5f9d"),
                            CategoryId = 2,
                            EventTypeId = 2,
                            Odds = 2.0m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("54e8adb7-616a-45b7-8b09-8815137c07d0"),
                            BetId = new Guid("1fe6ad59-16e3-465e-bfc4-ba99030a5f9d"),
                            CategoryId = 3,
                            EventTypeId = 3,
                            Odds = 1.7m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("357614f0-6ed2-48ab-ab18-3eeb6a39d793"),
                            BetId = new Guid("0a50eda4-ce05-4c73-914e-e35f37227d27"),
                            CategoryId = 2,
                            EventTypeId = 1,
                            Odds = 1.6m,
                            Status = 1
                        },
                        new
                        {
                            EventId = new Guid("e06d5ff0-b4e8-4c1b-b7e8-90828a9c9809"),
                            BetId = new Guid("0a50eda4-ce05-4c73-914e-e35f37227d27"),
                            CategoryId = 1,
                            EventTypeId = 4,
                            Odds = 2.3m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("5116eef5-1d1e-427d-a069-a0507f37e545"),
                            BetId = new Guid("0a50eda4-ce05-4c73-914e-e35f37227d27"),
                            CategoryId = 2,
                            EventTypeId = 5,
                            Odds = 2.1m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("b8a16683-03a5-452f-84c4-2a95b25d0a19"),
                            BetId = new Guid("0a50eda4-ce05-4c73-914e-e35f37227d27"),
                            CategoryId = 1,
                            EventTypeId = 6,
                            Odds = 1.8m,
                            Status = 2
                        },
                        new
                        {
                            EventId = new Guid("1e6ef780-82b4-4c16-b00f-352e3310010e"),
                            BetId = new Guid("71cc4ab8-9fe0-4925-8c8b-e0acc8c7ef2c"),
                            CategoryId = 2,
                            EventTypeId = 3,
                            Odds = 1.5m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("ec5524e1-da64-4242-a704-45f61640dcb2"),
                            BetId = new Guid("71cc4ab8-9fe0-4925-8c8b-e0acc8c7ef2c"),
                            CategoryId = 1,
                            EventTypeId = 1,
                            Odds = 1.7m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("d3581729-8c26-4b07-a337-5688879070de"),
                            BetId = new Guid("71cc4ab8-9fe0-4925-8c8b-e0acc8c7ef2c"),
                            CategoryId = 3,
                            EventTypeId = 4,
                            Odds = 2.4m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("563bc69f-122b-4ba6-b542-58bb6f51381c"),
                            BetId = new Guid("71cc4ab8-9fe0-4925-8c8b-e0acc8c7ef2c"),
                            CategoryId = 2,
                            EventTypeId = 5,
                            Odds = 2.1m,
                            Status = 2
                        },
                        new
                        {
                            EventId = new Guid("7e74b77f-8cce-4eb5-94fb-ea1971c680af"),
                            BetId = new Guid("71cc4ab8-9fe0-4925-8c8b-e0acc8c7ef2c"),
                            CategoryId = 1,
                            EventTypeId = 6,
                            Odds = 2.5m,
                            Status = 1
                        },
                        new
                        {
                            EventId = new Guid("924848d6-691e-4f5a-a6e2-276cbc333a7c"),
                            BetId = new Guid("01418e64-446a-42c9-9a88-fec52649f3f0"),
                            CategoryId = 3,
                            EventTypeId = 4,
                            Odds = 2.0m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("f75588f9-1919-4284-b15b-18d5b1c088b1"),
                            BetId = new Guid("01418e64-446a-42c9-9a88-fec52649f3f0"),
                            CategoryId = 2,
                            EventTypeId = 1,
                            Odds = 1.6m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("f132f339-0b45-40d2-80af-ad63e2c293b4"),
                            BetId = new Guid("5f150559-7a21-489f-ae6c-673ed010918a"),
                            CategoryId = 1,
                            EventTypeId = 3,
                            Odds = 1.9m,
                            Status = 1
                        },
                        new
                        {
                            EventId = new Guid("4e48c07a-1b43-4750-ac5e-bfa5f864061e"),
                            BetId = new Guid("5f150559-7a21-489f-ae6c-673ed010918a"),
                            CategoryId = 2,
                            EventTypeId = 2,
                            Odds = 2.2m,
                            Status = 0
                        },
                        new
                        {
                            EventId = new Guid("1bf6661c-eee1-4717-86b9-2a9047984e6d"),
                            BetId = new Guid("5f150559-7a21-489f-ae6c-673ed010918a"),
                            CategoryId = 3,
                            EventTypeId = 5,
                            Odds = 1.5m,
                            Status = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.EventType", b =>
                {
                    b.Property<int>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EventTypeId");

                    b.HasIndex("CategoryId");

                    b.ToTable("EventTypes");

                    b.HasData(
                        new
                        {
                            EventTypeId = 1,
                            CategoryId = 1,
                            Name = "BTTS"
                        },
                        new
                        {
                            EventTypeId = 2,
                            CategoryId = 1,
                            Name = "1X2"
                        },
                        new
                        {
                            EventTypeId = 3,
                            CategoryId = 1,
                            Name = "Over/Under Goals"
                        },
                        new
                        {
                            EventTypeId = 4,
                            CategoryId = 1,
                            Name = "Corners"
                        },
                        new
                        {
                            EventTypeId = 5,
                            CategoryId = 1,
                            Name = "Yellow Cards"
                        },
                        new
                        {
                            EventTypeId = 6,
                            CategoryId = 1,
                            Name = "Correct Score"
                        },
                        new
                        {
                            EventTypeId = 7,
                            CategoryId = 1,
                            Name = "Double Chance"
                        },
                        new
                        {
                            EventTypeId = 8,
                            CategoryId = 1,
                            Name = "First Goal Scorer"
                        },
                        new
                        {
                            EventTypeId = 9,
                            CategoryId = 1,
                            Name = "Last Goal Scorer"
                        },
                        new
                        {
                            EventTypeId = 10,
                            CategoryId = 1,
                            Name = "Player to Score Anytime"
                        },
                        new
                        {
                            EventTypeId = 11,
                            CategoryId = 1,
                            Name = "Clean Sheet"
                        },
                        new
                        {
                            EventTypeId = 12,
                            CategoryId = 1,
                            Name = "Team to Win Both Halves"
                        },
                        new
                        {
                            EventTypeId = 13,
                            CategoryId = 1,
                            Name = "Half-Time Result"
                        },
                        new
                        {
                            EventTypeId = 14,
                            CategoryId = 1,
                            Name = "Full-Time Result"
                        },
                        new
                        {
                            EventTypeId = 15,
                            CategoryId = 1,
                            Name = "Half-Time/Full-Time"
                        },
                        new
                        {
                            EventTypeId = 16,
                            CategoryId = 1,
                            Name = "Team to Score First"
                        },
                        new
                        {
                            EventTypeId = 17,
                            CategoryId = 1,
                            Name = "First Half Goals"
                        },
                        new
                        {
                            EventTypeId = 18,
                            CategoryId = 1,
                            Name = "Second Half Goals"
                        },
                        new
                        {
                            EventTypeId = 19,
                            CategoryId = 2,
                            Name = "Total Aces"
                        },
                        new
                        {
                            EventTypeId = 20,
                            CategoryId = 2,
                            Name = "Total Double Faults"
                        },
                        new
                        {
                            EventTypeId = 21,
                            CategoryId = 2,
                            Name = "Set Winner"
                        },
                        new
                        {
                            EventTypeId = 22,
                            CategoryId = 2,
                            Name = "Match Winner"
                        },
                        new
                        {
                            EventTypeId = 23,
                            CategoryId = 2,
                            Name = "First Set Winner"
                        },
                        new
                        {
                            EventTypeId = 24,
                            CategoryId = 2,
                            Name = "Total Games Over/Under"
                        },
                        new
                        {
                            EventTypeId = 25,
                            CategoryId = 3,
                            Name = "First Basket Scorer"
                        },
                        new
                        {
                            EventTypeId = 26,
                            CategoryId = 3,
                            Name = "Total Points Over/Under"
                        },
                        new
                        {
                            EventTypeId = 27,
                            CategoryId = 3,
                            Name = "Winning Margin"
                        },
                        new
                        {
                            EventTypeId = 28,
                            CategoryId = 3,
                            Name = "Most Assists"
                        },
                        new
                        {
                            EventTypeId = 29,
                            CategoryId = 3,
                            Name = "Total Rebounds"
                        },
                        new
                        {
                            EventTypeId = 30,
                            CategoryId = 3,
                            Name = "First Team to Score 20 Points"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Bet", b =>
                {
                    b.HasOne("Domain.Entities.Bookmaker", "Bookmaker")
                        .WithMany("BetList")
                        .HasForeignKey("BookmakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bookmaker");
                });

            modelBuilder.Entity("Domain.Entities.Event", b =>
                {
                    b.HasOne("Domain.Entities.Bet", "Bet")
                        .WithMany("EventsList")
                        .HasForeignKey("BetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bet");

                    b.Navigation("Category");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("Domain.Entities.EventType", b =>
                {
                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("EventTypes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Entities.Bet", b =>
                {
                    b.Navigation("EventsList");
                });

            modelBuilder.Entity("Domain.Entities.Bookmaker", b =>
                {
                    b.Navigation("BetList");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Navigation("EventTypes");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("Domain.Entities.EventType", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
