@using Domain.Enums
@using Domain.Functions
@using Syncfusion.Blazor.DropDowns
@inject IRepositoryWrapper RepositoryWrapper




<SfGrid @ref="BetGridInstance" DataSource="Bets" AllowGrouping="true" AllowPaging="true" AllowSelection="true" Toolbar="@(new List<string>() { "Add", "Delete", "Update", "Cancel"})">
    <GridPageSettings PageSize="5"></GridPageSettings>

    
    <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="EditMode.Normal"></GridEditSettings>
    <GridEvents RowSelected="RowSelectHandler" TValue="Bet" OnActionComplete="BetActionsHandler"></GridEvents>
    <GridColumns>
        <GridForeignColumn Field="@nameof(Bookmaker.BookmakerId)" TextAlign="TextAlign.Left" HeaderText="Bookmaker" ValidationRules="new ValidationRules{Min =  1}" ForeignDataSource="Bookmakers" ForeignKeyValue="Name" EditType="EditType.DropDownEdit">
            <Template>
                @{
                    var bookmaker = (context as Bet).Bookmaker;
                    <div class="bookmaker-icon-container">
                        <img src="@bookmaker?.ImagePath" alt="@bookmaker?.Name" />
                    </div>

                }
            </Template>
            <EditTemplate>
                <SfDropDownList @bind-value="@((context as Bet).BookmakerId)" TValue="int" TItem="Bookmaker" PopupHeight="230px" Placeholder="Bookmaker" DataSource="Bookmakers">
                    <DropDownListTemplates TItem="Bookmaker">
                        <ItemTemplate Context="bookmaker">
                            @{

                                <div class="bookmaker-icon-container">
                                    <img src="@bookmaker.ImagePath" alt="@bookmaker.Name" />
                                </div>

                            }
                        </ItemTemplate>
                        <ValueTemplate Context="bookmaker">
                            @{

                                <div class="bookmaker-icon-container">
                                    <img src="@bookmaker.ImagePath" alt="@bookmaker.Name" />
                                </div>

                            }
                        </ValueTemplate>

                    </DropDownListTemplates>
                    <DropDownListFieldSettings Value="BookmakerId"></DropDownListFieldSettings>
                </SfDropDownList>
            </EditTemplate>
        </GridForeignColumn>
        <GridColumn Field="@nameof(Bet.BetId)" Visible="false" IsPrimaryKey="true" IsIdentity="true"></GridColumn>
        <GridColumn Field="@nameof(Bet.Stake)" TextAlign="TextAlign.Left" Type="ColumnType.Decimal" ValidationRules="new ValidationRules{ Required = true, Range=[1,99999]}" HeaderText="Stake"></GridColumn>
        <GridColumn Field="@nameof(Bet.TotalOdds)" TextAlign="TextAlign.Left" AllowAdding="false" AllowEditing="false" HeaderText="Total Odds" Format="0.00"></GridColumn>
        <GridColumn Field="@nameof(Bet.PotentialWin)" AllowAdding="false" TextAlign="TextAlign.Center" AllowEditing="false" HeaderText="Potential Win" Format="C2"></GridColumn>
        <GridColumn Field="@nameof(Bet.BetDate)" DefaultValue="DateTime.Today" Format="dd MMM yyyy" HeaderText="Bet Date" Type="Syncfusion.Blazor.Grids.ColumnType.Date"></GridColumn>
        <GridColumn Field="@nameof(Bet.Status)" AllowAdding="false" AllowEditing="false" HeaderText="Status" TextAlign="TextAlign.Center">
            <Template>
                @{
                    var bet = (context as Bet);

                    @if (bet.Status == StatusEnum.Won)
                    {
                        <div class="status-won">
                            <span>@bet.Status</span>
                        </div>
                    }
                    @if (bet.Status == StatusEnum.Lost)
                    {
                        <div class="status-lost">
                            <span>@bet.Status</span>
                        </div>
                    }
                    @if (bet.Status == StatusEnum.Unfinished)
                    {
                        <div class="status-unfinished">
                            <span>@bet.Status</span>
                        </div>
                    }

                }
            </Template>
        </GridColumn>

        <GridColumn Field="@nameof(Bet.LivePrematch)" TextAlign="TextAlign.Center" HeaderText="State" EditType="EditType.DropDownEdit">
            <EditTemplate>
                <SfDropDownList @bind-value="((context as Bet).LivePrematch)" TItem="string" TValue="LivePrematchEnum" DataSource="LivePrematchEnumValues">
                </SfDropDownList>
            </EditTemplate>
        </GridColumn>
        <GridColumn Field="@nameof(Bet.IsTaxIncluded)" HeaderText="Tax" DisplayAsCheckBox="true" TextAlign="TextAlign.Center"></GridColumn>

    </GridColumns>
</SfGrid>


<div class="divider">
</div>

@if (IsBetSelected)
{

    <SfGrid @ref="EventGridInstance" Height="200px" EnableStickyHeader="true" DataSource="Events" Query="@BuildQuery()" TValue="Event" Toolbar="@(new List<string>() { "Add", "Delete", "Update", "Cancel" })">
        <GridEvents TValue="Event" OnActionComplete="EventActionHandler"></GridEvents>
        <GridSelectionSettings></GridSelectionSettings>
        <GridTemplates>
            <EmptyRecordTemplate>
                <span style="font-weight:500"><center>There are no event's added yet!</center></span>
            </EmptyRecordTemplate>
        </GridTemplates>
        <GridEditSettings AllowEditing="true" AllowAdding="true" AllowDeleting="true" NewRowPosition="NewRowPosition.Bottom"></GridEditSettings>
        <GridColumns>
            <GridColumn Field="@nameof(Event.EventId)" IsPrimaryKey="true" IsIdentity="true" Visible="false"></GridColumn>
            <GridColumn Field="@nameof(Event.Odds)" HeaderText="Odds"></GridColumn>

            <GridForeignColumn Field="@nameof(Category.CategoryId)" HeaderText="Category" TValue="Category" ForeignDataSource="Categories" ForeignKeyValue="Name">
                <EditTemplate>
                    <SfDropDownList @bind-value="@((context as Event).CategoryId)" TItem="Category" TValue="int" ID="CategoryId" Placeholder="Select category" DataSource="Categories">
                        <DropDownListFieldSettings Text="Name" Value="CategoryId"></DropDownListFieldSettings>
                        <DropDownListEvents TItem="Category" TValue="int" ValueChange="ChangeCategory"></DropDownListEvents>
                    </SfDropDownList>
                </EditTemplate>
            </GridForeignColumn>

            <GridForeignColumn Field="@nameof(LeagueTournament.LeagueTournamentId)" HeaderText="Competition" TValue="LeagueTournament" ForeignDataSource="LeagueTournaments" ForeignKeyValue="Name">
                <EditTemplate>
                    <SfDropDownList @bind-value="@((context as Event).LeagueTournamentId)" TItem="LeagueTournament" Enabled="EnableEventTypeDropDown" TValue="int" Query="LeagueTournamentQuery" ID="LeagueTournamentId" Placeholder="Select competition" DataSource="LeagueTournaments">
                        <DropDownListFieldSettings Text="Name" Value="LeagueTournamentId"></DropDownListFieldSettings>
                    </SfDropDownList>
                </EditTemplate>
            </GridForeignColumn>

            <GridForeignColumn Field="@nameof(EventType.EventTypeId)" HeaderText="Event Type" TValue="EventType" ForeignDataSource="EventTypes" ForeignKeyValue="Name">
                <EditTemplate>
                    <SfDropDownList @bind-value="@((context as Event).EventTypeId)" Enabled="EnableEventTypeDropDown" Query="EventTypeQuery" TItem="EventType" TValue="int" ID="EventTypeId" PopupHeight="200px" Placeholder="Select event type" DataSource="EventTypes">
                        <DropDownListFieldSettings Text="Name" Value="EventTypeId"></DropDownListFieldSettings>
                    </SfDropDownList>
                </EditTemplate>
            </GridForeignColumn>

            <GridColumn Field="@nameof(Event.Status)" HeaderText="Status" EditType="EditType.DropDownEdit">
                <Template>
                    @{
                        var status = (context as Event).Status;

                        @if (status == StatusEnum.Won)
                        {
                            <div class="status-won">
                                <span>@status</span>
                            </div>
                        }
                        @if (status == StatusEnum.Lost)
                        {
                            <div class="status-lost">
                                <span>@status</span>
                            </div>
                        }
                        @if (status == StatusEnum.Unfinished)
                        {
                            <div class="status-unfinished">
                                <span>@status</span>
                            </div>
                        }

                    }
                </Template>
                <EditTemplate>
                    <SfDropDownList TItem="string" TValue="StatusEnum" DataSource="StatusValues" @bind-value="((context as Event).Status)">
                    </SfDropDownList>
                </EditTemplate>
            </GridColumn>
        </GridColumns>

    </SfGrid>

}



<SfToast @ref="ToastObj"  Timeout="3000">
    <ToastPosition X="Right"></ToastPosition>
    <ToastAnimationSettings>
        <ToastShowAnimationSettings Effect="ToastEffect.SlideBottomIn"></ToastShowAnimationSettings>
        <ToastHideAnimationSettings Effect="ToastEffect.SlideTopOut"></ToastHideAnimationSettings>
    </ToastAnimationSettings>
</SfToast>


@code {

    SfGrid<Bet>? BetGridInstance { get; set; }
    SfGrid<Event>? EventGridInstance { get; set; }
    SfToast ToastObj;

    public IEnumerable<Bet>? Bets { get; set; }
    public IEnumerable<Event>? Events { get; set; }
    public IEnumerable<Bookmaker>? Bookmakers { get; set; }
    public IEnumerable<Category>? Categories { get; set; }
    public IEnumerable<EventType>? EventTypes { get; set; }
    public IEnumerable<LeagueTournament>? LeagueTournaments { get; set; }

    public Query? EventTypeQuery { get; set; }
    public Query? LeagueTournamentQuery { get; set; }

    public bool IsBetSelected;
    public bool EnableEventTypeDropDown;

    public Guid? RowIndex { get; set; }
    public string[] StatusValues = Enum.GetNames(typeof(StatusEnum));
    public string[] LivePrematchEnumValues = Enum.GetNames(typeof(LivePrematchEnum));


    protected override async Task OnInitializedAsync()
    {
        Bets = await RepositoryWrapper.BetRepository.GetAllBetsAsync();
        Events = await RepositoryWrapper.EventRepository.GetAllEventsAsync();
        Bookmakers = await RepositoryWrapper.BookmakerRepository.GetAllBookmakersAsync();
        Categories = await RepositoryWrapper.CategoryRepository.GetAllCategoriesAsync();
        EventTypes = await RepositoryWrapper.EventTypeRepostiory.GetAllEventTypesAsync();
        LeagueTournaments = await RepositoryWrapper.LeagueTournamentRepository.GetAllLeagueTournamentsAsync();

    }

    /// <summary>
    /// Storing bet id to pass it to function BuildQuery
    /// </summary>
    /// <param name="Args"></param>
    public void RowSelectHandler(RowSelectEventArgs<Bet> Args)
    {
        RowIndex = Args.Data.BetId;
        IsBetSelected = true;
    }


    /// <summary>
    /// Event grid actions handler. It is executed after completing operation.
    /// </summary>
    /// <param name="args"></param>

    public async void EventActionHandler(ActionEventArgs<Event> args)
    {
        try
        {
            // Operation after modyfing grid event row
            if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
            {

                // Operation after creating event
                if (args.Action.Equals("Add") &&
                (!args.Data.EventTypeId.Equals(0) ||
                !args.Data.CategoryId.Equals(0) ||
                !args.Data.LeagueTournamentId.Equals(0))
                )
                {
                    args.Data.BetId = RowIndex;

                    RepositoryWrapper.EventRepository.CreateEvent(args.Data);
                    await RepositoryWrapper.SaveAsync();
                    Bets = await RepositoryWrapper.BetRepository.GetAllBetsAsync();
                    await EventGridInstance.Refresh();
                    await BetGridInstance.Refresh();
                    await ShowToastGridOperations.ShowToastGridOperation(this.ToastObj, ToastTypeEnum.Succes,"Event was succesfull created!");

                }
                // Operation after editing event
                else if (args.Action == "Edit")
                {

                    Bets = await RepositoryWrapper.BetRepository.GetAllBetsAsync();
                    RepositoryWrapper.EventRepository.UpdateEvent(args.Data);
                    await RepositoryWrapper.SaveAsync();
                    await EventGridInstance.Refresh();
                    await BetGridInstance.Refresh();
                    await ShowToastGridOperations.ShowToastGridOperation(this.ToastObj, ToastTypeEnum.Succes,"Event was succesfully edited!");

                }
            }
            // Operation after deleting event
            else if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
            {
                RepositoryWrapper.EventRepository.Delete(args.Data);
                await RepositoryWrapper.SaveAsync();
                Bets = await RepositoryWrapper.BetRepository.GetAllBetsAsync();
                await EventGridInstance.Refresh();
                await BetGridInstance.Refresh();
                await ShowToastGridOperations.ShowToastGridOperation(this.ToastObj, ToastTypeEnum.Succes,"Event was succesfully deleted!");

            }

        }
        catch (Exception)
        {
            await ShowToastGridOperations.ShowToastGridOperation(this.ToastObj, ToastTypeEnum.Failed,"");
            throw;
        }


    }

    /// <summary>
    /// Bet grid actions handler. It is executed after completing operation.
    /// </summary>
    /// <param name="args"></param>

    public async void BetActionsHandler(ActionEventArgs<Bet> args)
    {
        try
        {
            // Operation after modyfing bet grid row
            if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
            {
                // Operation after creating bet
                if (args.Action == "Add")
                {

                    RepositoryWrapper.BetRepository.CreateBet(args.Data);
                    await RepositoryWrapper.SaveAsync();
                    await BetGridInstance.Refresh();
                    await ShowToastGridOperations.ShowToastGridOperation(this.ToastObj, ToastTypeEnum.Succes, "Bet was succesfully created!");


                }
                // Operation after editing bet
                else if (args.Action == "Edit")
                {

                    RepositoryWrapper.BetRepository.UpdateBet(args.Data);
                    await RepositoryWrapper.SaveAsync();
                    await BetGridInstance.Refresh();
                    await ShowToastGridOperations.ShowToastGridOperation(this.ToastObj, ToastTypeEnum.Succes,"Bet was succesfuly edited!");

                }
            }

            // Operation after deleting bet
            else if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
            {
                RepositoryWrapper.BetRepository.DeleteBet(args.Data);
                await RepositoryWrapper.SaveAsync();
                await BetGridInstance.Refresh();
                await ShowToastGridOperations.ShowToastGridOperation(this.ToastObj, ToastTypeEnum.Succes,"Bet was succesfuly deleted!");

            }


        }
        catch (Exception)
        {
            await ShowToastGridOperations.ShowToastGridOperation(this.ToastObj, ToastTypeEnum.Failed,"");
            throw;
        }

    }


    /// <summary>
    /// When choosing category on event grid, related event types are shown.
    /// For example, you when tennis is chosen, you cannot select Above/Under goals event type.
    /// </summary>
    /// <param name="args"></param>
    public void ChangeCategory(ChangeEventArgs<int, Category> args)
    {
        EnableEventTypeDropDown = args.Value > 0 ? true : false;
        this.EventTypeQuery = new Query().Where(new WhereFilter() { Field = "CategoryId", Operator = "equal", value = args.Value, IgnoreCase = false, IgnoreAccent = false });
        this.LeagueTournamentQuery = new Query().Where(new WhereFilter() { Field = "CategoryId", Operator = "equal", value = args.Value, IgnoreCase = false, IgnoreAccent = false });
        EventGridInstance.PreventRender(false);
    }

    /// <summary>
    /// When selecting bet, related events are displayed on event's grid
    /// </summary>
    /// <returns></returns>

    private Query BuildQuery()
    {
        if (RowIndex.HasValue)
        {

            return new Query().Where("BetId", "equal", RowIndex);

        }
        else
        {
            return new Query();
        }
    }
        
    
}
