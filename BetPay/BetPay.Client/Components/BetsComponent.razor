@using BetPay.Enums
@inject IRepositoryWrapper RepositoryWrapper
@rendermode InteractiveServer



<SfGrid @ref="BetGridInstance" DataSource="Bets" Allow AllowPaging="true" AllowSelection="true" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Cancel", "Update" })">
    <GridPageSettings PageSize="10"></GridPageSettings>
    <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true"></GridEditSettings>
    <GridEvents RowSelected="RowSelectHandler" TValue="Bet"  OnActionComplete="BetActionsHandler"></GridEvents>
    <GridColumns>
        <GridColumn Field="@nameof(Bet.BetId)" IsPrimaryKey="true" IsIdentity="true"></GridColumn>
        <GridColumn Field="@nameof(Bet.Stake)" HeaderText="Stake"></GridColumn>
        <GridColumn Field="@nameof(Bet.TotalOdds)" AllowEditing="false" HeaderText="Total Odds" Format="0.00"></GridColumn>
        <GridColumn Field="@nameof(Bet.PotentialWin)" AllowEditing="false" HeaderText="Potential Win" Format="C2"></GridColumn>
        <GridColumn Field="@nameof(Bet.BetDate)"  Format="d" HeaderText="Bet Date" Type="Syncfusion.Blazor.Grids.ColumnType.Date"></GridColumn>
        <GridColumn Field="@nameof(Bet.Bookmaker)" HeaderText="Bookmaker"></GridColumn>
        <GridColumn Field="@nameof(Bet.Status)" HeaderText="Status"></GridColumn>
        <GridColumn Field="@nameof(Bet.IsTaxIncluded)" ></GridColumn>
    </GridColumns>
</SfGrid>

<br />

@if (IsBetSelected)
{
    <center>
        <h2>Events for selected bet!</h2>
    </center>

    <SfGrid @ref="EventGridInstance" DataSource="Events" Query="@BuildQuery()" TValue="Event" Toolbar="@(new List<string>() { "Add", "Delete", "Cancel" })">
        <GridEvents TValue="Event" OnCellSave="OnEventEdit"></GridEvents>
        <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Cell"></GridSelectionSettings>
        <GridEditSettings AllowEditing="true" Mode="@EditMode.Batch" AllowAdding="true" AllowDeleting="true" NewRowPosition="NewRowPosition.Bottom"></GridEditSettings>
        <GridColumns>
            <GridColumn Field="@nameof(Event.EventId)" IsPrimaryKey="true" IsIdentity="true" Visible="false"></GridColumn>
            <GridColumn Field="@nameof(Event.Odds)" AllowEditing="false" HeaderText="Odds"></GridColumn>
            <GridColumn Field="EventType.Name" AllowEditing="false" HeaderText="Event Type"></GridColumn>
            <GridColumn Field="Category.Name" AllowEditing="false" HeaderText="Category"></GridColumn>
            <GridColumn Field="@nameof(Event.Status)" HeaderText="Status" EditType="EditType.DropDownEdit">
                <EditTemplate>
                    <SfDropDownList ID="StatusEnum" TItem="string" TValue="StatusEnum" DataSource="@StatusValues" @bind-Value="@ddlVal">
                        <DropDownListEvents TValue="StatusEnum" TItem="string" ValueChange="OnEventStatusChanged"></DropDownListEvents>
                        <DropDownListFieldSettings Text="StatusEnum" Value="StatusEnum"></DropDownListFieldSettings>
                    </SfDropDownList>
                </EditTemplate>
            </GridColumn>
        </GridColumns>

    </SfGrid>

}
else
{
    <center>
        <h2>Select bet to display events!</h2>
    </center>

}


@code {

    SfGrid<Bet> BetGridInstance { get; set; }
    SfGrid<Event> EventGridInstance { get; set; }

    private IEnumerable<Bet> Bets { get; set; }
    private IEnumerable<Event> Events { get; set; }

    private Guid? RowIndex { get; set; }
    private bool IsBetSelected;
    private string[] StatusValues = Enum.GetNames(typeof(StatusEnum));
    private StatusEnum ddlVal { get; set; }





    protected override async Task OnInitializedAsync()
    {
        Bets = await RepositoryWrapper.BetRepository.GetAllBetsAsync();
        Events = await RepositoryWrapper.EventRepository.GetAllEventsAsync();

    }

    public async Task RowSelectHandler(RowSelectEventArgs<Bet> Args)
    {

        RowIndex = Args.Data.BetId;
        IsBetSelected = true;
    }

    public async void OnEventStatusChanged(ChangeEventArgs<StatusEnum, string> args)
    {

        ddlVal = args.Value;

    }

    public async void OnEventEdit(CellSaveArgs<Event> args)
    {

        var updatedEvent = args.Data;
        updatedEvent.Status = ddlVal;

        RepositoryWrapper.EventRepository.UpdateEvent(updatedEvent);

        await RepositoryWrapper.SaveAsync();
        StateHasChanged();
        await BetGridInstance.Refresh();
        await EventGridInstance.Refresh();


    }

    public async void BetActionsHandler(ActionEventArgs<Bet> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if(args.Action == "Add")
            {
                RepositoryWrapper.BetRepository.CreateBet(args.Data);
                await RepositoryWrapper.SaveAsync();
                BetGridInstance.Refresh();
            }
        }
        else if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            RepositoryWrapper.BetRepository.DeleteBet(args.Data);
            await RepositoryWrapper.SaveAsync();
            BetGridInstance.Refresh();
        }
        

    }

    private Query BuildQuery()
    {
        if (RowIndex.HasValue)
        {

            return new Query().Where("BetId", "equal", RowIndex);

        }
        else
        {
            return new Query();
        }

    }

}

