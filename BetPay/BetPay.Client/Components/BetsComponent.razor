@using BetPay.Enums
@using Syncfusion.Blazor.DropDowns
@inject IRepositoryWrapper RepositoryWrapper
@rendermode InteractiveServer



<SfGrid @ref="BetGridInstance" DataSource="Bets" Allow AllowPaging="true" AllowSelection="true" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Update", "Cancel"})">
    <GridPageSettings PageSize="10"></GridPageSettings>
    <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true"></GridEditSettings>
    <GridEvents RowSelected="RowSelectHandler" TValue="Bet" OnActionComplete="BetActionsHandler"></GridEvents>
    <GridColumns>
        <GridColumn Field="@nameof(Bet.BetId)" Visible="false" IsPrimaryKey="true" IsIdentity="true"></GridColumn>
        <GridColumn Field="@nameof(Bet.Stake)" Type="ColumnType.Decimal" ValidationRules="new ValidationRules{ Required = true, Range=[1,99999]}" HeaderText="Stake"></GridColumn>
        <GridColumn Field="@nameof(Bet.TotalOdds)" AllowAdding="false" AllowEditing="false" HeaderText="Total Odds" Format="0.00"></GridColumn>
        <GridColumn Field="@nameof(Bet.PotentialWin)" AllowAdding="false" AllowEditing="false" HeaderText="Potential Win" Format="C2"></GridColumn>
        <GridColumn Field="@nameof(Bet.BetDate)" DefaultValue="DateTime.Today" Format="d" HeaderText="Bet Date" Type="Syncfusion.Blazor.Grids.ColumnType.Date"></GridColumn>
        <GridForeignColumn Field="@nameof(Bookmaker.BookmakerId)" HeaderText="Bookmaker" ValidationRules="new ValidationRules{Min =  1}" ForeignDataSource="Bookmakers" ForeignKeyValue="Name" EditType="EditType.DropDownEdit">
            <EditTemplate>
                <SfDropDownList ID="BookmakerId" @bind-Value="((context as Bet).BookmakerId)" TValue="int" TItem="Bookmaker" PopupHeight="230px" Placeholder="Bookmaker" DataSource="Bookmakers">
                    <DropDownListFieldSettings Text="Name" Value="BookmakerId"></DropDownListFieldSettings>
                </SfDropDownList>
            </EditTemplate>
        </GridForeignColumn>
        <GridColumn HeaderText="Bookmaker Icon">
            <Template>
                @{
                    var bookmaker = (context as Bet).Bookmaker;
                    <div class="bookmaker-icon-container">
                        <img src="@(bookmaker.ImagePath)" />
                    </div>
                }
            </Template>
        </GridColumn>
        <GridColumn Field="@nameof(Bet.Status)" AllowAdding="false" AllowEditing="false" HeaderText="Status"></GridColumn>
        <GridColumn Field="@nameof(Bet.IsTaxIncluded)" DisplayAsCheckBox="true" AllowEditing="false"></GridColumn>
    </GridColumns>
</SfGrid>

<br />

@if (IsBetSelected)
{
    <center>
        <h2>Events for selected bet!</h2>
    </center>

    <SfGrid @ref="EventGridInstance" DataSource="Events" Query="@BuildQuery()" TValue="Event" Toolbar="@(new List<string>() { "Add", "Delete", "Update", "Cancel" })">
        <GridEvents TValue="Event" OnActionComplete="EventActionHandler"></GridEvents>
        <GridSelectionSettings></GridSelectionSettings>
        <GridEditSettings AllowEditing="true" AllowAdding="true" AllowDeleting="true" NewRowPosition="NewRowPosition.Bottom"></GridEditSettings>
        <GridColumns>
            <GridColumn Field="@nameof(Event.EventId)" IsPrimaryKey="true" IsIdentity="true" Visible="false"></GridColumn>
            <GridColumn Field="@nameof(Event.Odds)"  HeaderText="Odds"></GridColumn>
            <GridForeignColumn  Field="@nameof(EventType.EventTypeId)" HeaderText="Event Type" TValue="EventType" ForeignDataSource="EventTypes" ForeignKeyValue="Name">
                <EditTemplate>
                    <SfDropDownList @bind-value="@((context as Event).EventTypeId)" ID="EventTypeId" DataSource="EventTypes" TItem="EventType" TValue="int">
                        <DropDownListFieldSettings Text="Name" Value="EventTypeId"></DropDownListFieldSettings>
                    </SfDropDownList>
                </EditTemplate>
            </GridForeignColumn>
            <GridForeignColumn  Field="@nameof(Category.CategoryId)" HeaderText="Category" TValue="Category" ForeignDataSource="Categories" ForeignKeyValue="Name">
                <EditTemplate>
                    <SfDropDownList @bind-value="@((context as Event).CategoryId)" ID="CategoryId" DataSource="Categories" TItem="Category" TValue="int">
                        <DropDownListFieldSettings Text="Name" Value="CategoryId"></DropDownListFieldSettings>
                    </SfDropDownList>
                </EditTemplate>
            </GridForeignColumn>

            <GridColumn Field="@nameof(Event.Status)" HeaderText="Status" EditType="EditType.DropDownEdit">
                <EditTemplate>
                    <SfDropDownList TItem="string" TValue="StatusEnum" DataSource="StatusValues" @bind-value="((context as Event).Status)">
                    </SfDropDownList>
                </EditTemplate>
            </GridColumn>
        </GridColumns>

    </SfGrid>

}
else
{
    <center>
        <h2>Select bet to display events!</h2>
    </center>

}


@code {

    SfGrid<Bet>? BetGridInstance { get; set; }
    SfGrid<Event>? EventGridInstance { get; set; }

    public IEnumerable<Bet>? Bets { get; set; }
    public IEnumerable<Event>? Events { get; set; }
    public IEnumerable<Bookmaker>? Bookmakers { get; set; }
    public IEnumerable<Category>? Categories { get; set; }
    public IEnumerable<EventType>? EventTypes { get; set; }

    public Guid? RowIndex { get; set; }
    public bool IsBetSelected;
    public string[] StatusValues = Enum.GetNames(typeof(StatusEnum));


    protected override async Task OnInitializedAsync()
    {
        Bets = await RepositoryWrapper.BetRepository.GetAllBetsAsync();
        Events = await RepositoryWrapper.EventRepository.GetAllEventsAsync();
        Bookmakers = await RepositoryWrapper.BookmakerRepository.GetAllBookmakersAsync();
        Categories = await RepositoryWrapper.CategoryRepository.GetAllCategoriesAsync();
        EventTypes = await RepositoryWrapper.EventTypeRepostiory.GetAllEventTypesAsync();

    }

    public async Task RowSelectHandler(RowSelectEventArgs<Bet> Args)
    {

        RowIndex = Args.Data.BetId;
        IsBetSelected = true;
    }



    public async void EventActionHandler(ActionEventArgs<Event> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if (args.Action == "Add")
            {

                args.Data.BetId = RowIndex;

                RepositoryWrapper.EventRepository.CreateEvent(args.Data);
                await RepositoryWrapper.SaveAsync();
                Bets = await RepositoryWrapper.BetRepository.GetAllBetsAsync();
                await EventGridInstance.Refresh();
                await BetGridInstance.Refresh();

            }
            else if (args.Action == "Edit")
            {

                Bets = await RepositoryWrapper.BetRepository.GetAllBetsAsync();
                RepositoryWrapper.EventRepository.UpdateEvent(args.Data);
                await RepositoryWrapper.SaveAsync();
                await EventGridInstance.Refresh();
                await BetGridInstance.Refresh();

            }


        }
        else if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            RepositoryWrapper.EventRepository.Delete(args.Data);
            await RepositoryWrapper.SaveAsync();
            await EventGridInstance.Refresh();
        }


    }

    public async void BetActionsHandler(ActionEventArgs<Bet> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if (args.Action == "Add")
            {

                RepositoryWrapper.BetRepository.CreateBet(args.Data);
                await RepositoryWrapper.SaveAsync();
                await BetGridInstance.Refresh();

            }
        }
        else if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            RepositoryWrapper.BetRepository.DeleteBet(args.Data);
            await RepositoryWrapper.SaveAsync();
            await BetGridInstance.Refresh();
        }


    }

    private Query BuildQuery()
    {
        if (RowIndex.HasValue)
        {

            return new Query().Where("BetId", "equal", RowIndex);

        }
        else
        {
            return new Query();
        }

    }

}

