@inject IRepositoryWrapper RepositoryWrapper
@rendermode InteractiveServer



<SfGrid DataSource="Bets" AllowPaging="true" AllowSelection="true" >
    <GridPageSettings PageSize="3"></GridPageSettings>   
    <GridEvents RowSelected="RowSelectHandler" TValue="Bet"></GridEvents>
    <GridColumns>
        <GridColumn Field="@nameof(Bet.BetId)" HeaderText="ID" IsPrimaryKey="true"></GridColumn>
        <GridColumn Field="@nameof(Bet.Stake)" HeaderText="Stake"></GridColumn>
        <GridColumn Field="@nameof(Bet.TotalOdds)" HeaderText="Total Odds"></GridColumn>
        <GridColumn Field="@nameof(Bet.PotentialWin)" HeaderText="Potential Win" Format="C2"></GridColumn>
        <GridColumn Field="@nameof(Bet.BetDate)" Format="d" HeaderText="Bet Date" Type="Syncfusion.Blazor.Grids.ColumnType.Date"></GridColumn>
        <GridColumn Field="@nameof(Bet.Bookmaker)" HeaderText="Bookmaker"></GridColumn>

    </GridColumns>
</SfGrid>

<br />
<center>
    <div>
        Events for selected bet.
    </div>
</center>

<SfGrid DataSource="Events" Query="@BuildQuery()" AllowSorting="true">
</SfGrid>

@code {


    public IEnumerable<Bet> Bets { get; set; }
    public IEnumerable<Event> Events { get; set; }
    public Guid? RowIndex { get; set; }


    protected override async Task OnInitializedAsync()
    {
        Bets = await RepositoryWrapper.BetRepository.GetAllBetsAsync();
        Events = await RepositoryWrapper.EventRepository.GetAllEventsAsync();

    }

    public async Task RowSelectHandler(RowSelectEventArgs<Bet> Args)
    {

        RowIndex = Args.Data.BetId;

    }


    private Query BuildQuery()
    {

        if (RowIndex.HasValue)
        {
            return new Query().Where("BetId", "equal", RowIndex);
        }
        else
        {
            return new Query();
        }
    }

}

